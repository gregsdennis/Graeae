openapi: 3.0.3
info:
    title: Postman API
    version: 1.0
    description: >
        The Postman API enables you to programmatically access data stored in your Postman account.


        ## Important


        - You must pass an `Accept` header with the `application/vnd.api.v10+json` value to use v10 and higher endpoints. While some of these endpoints may appear the same as the deprecated Postman v9 endpoints, they will use the v10 behavior when you send this `Accept` header.

        - To use the **API** endpoints, you must first [update your APIs to the v10 format](https://postman.postman.co/docs/designing-and-developing-your-api/creating-an-api/#updating-an-api).


        ## Getting started


        You can get started with the Postman API by [forking the Postman API collection](https://learning.postman.com/docs/collaborating-in-postman/version-control/#creating-a-fork) to your workspace. You can then use Postman to send requests.


        ## Overview


        1. You must use a valid API Key to send requests to the API endpoints. You can get your API key from Postman's [integrations dashboard](https://go.postman.co/settings/me/api-keys).

        1. The API has [rate and usage limits](#rate-and-usage-limits).

        1. The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP `301` redirect to the corresponding HTTPS resources.

        1. The API returns requests responses in [JSON format](https://en.wikipedia.org/wiki/JSON). When an API request returns an error, it is sent in the JSON response as an error key.

        1. The request method (verb) determines the nature of action you intend to perform. A request made using the `GET` method implies that you want to fetch something from Postman. The `POST` method implies you want to save something new to Postman.

        1. For all requests, API calls respond with their corresponding [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes). In the Postman client, the status code also provides help text that details the possible meaning of the response code.

        1. You can access individual resources in your Postman with its unique ID (`uid`) value. The `uid` is a simple concatenation of the resource owner's user ID and the resource's ID. For example, a collection's `uid` is the `{{owner_id}}-{{collection_id}}` value.


        ## ID and UID


        All items in Postman, such as collections, workspaces, and APIs, have ID and UIDs:


        - An ID is the unique ID assigned to a Postman item. For example, `ec29121c-5203-409f-9e84-e83ffc10f226`.

        - The UID is the **full** ID of a Postman item. This value is the item's unique ID concatenated with the user ID. For example, in the `12345678-ec29121c-5203-409f-9e84-e83ffc10f226` UID:
                - `12345678` is the user's ID.
                - `ec29121c-5203-409f-9e84-e83ffc10f226` is the item's ID.

        ## Authentication


        Postman uses API keys for authentication. The API key tells the API server that the request came from you. Everything that you have access to in Postman is accessible with your API key. You can generate a Postman API key in the [**API keys**](https://postman.postman.co/settings/me/api-keys) section of your Postman account settings.


        You must include an API key in each request to the Postman API with the `X-Api-Key` request header. In Postman, you can store your API key as an [environment variable](https://www.getpostman.com/docs/environments). The Postman API [collection](https://www.getpostman.com/docs/collections) will use it to make API calls.


        ### Authentication error response


        If an API key is missing, malformed, or invalid, you will receive an HTTP `401 Unauthorized` response code.


        ### Using the API key as a query parameter


        Requests that accept the `X-Api-Key` request header also accept the API key when you send it as the `apikey` query parameter. An API key sent as part of the header has a higher priority when you send the key as both a request header and a query parameter.


        ## Rate and usage limits


        API access rate limits apply at a per-API key basis in unit time. The limit is **300 requests per minute**. Also, depending on your [plan](https://www.postman.com/pricing/), you may have usage limits. If you exceed either limit, your request will return an HTTP `429 Too Many Requests` status code.


        Each API response returns the following set of headers to help you identify your use status:


        | Header | Description |

        | ------ | ----------- |

        | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make per minute. |

        | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |

        | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |


        ## 503 response


        An HTTP `503` response from our servers indicates there is an unexpected spike in API access traffic. The server is usually operational within the next five minutes. If the outage persists or you receive any other form of an HTTP `5XX` error, [contact support](https://support.postman.com/hc/en-us/requests/new/).


        ## Support


        For help regarding accessing the Postman API, you can:


        - Visit [Postman Support](https://support.postman.com/hc/en-us) or our [Community and Support](https://www.postman.com/community/) sites.

        - Reach out to the [Postman community](https://community.postman.com/).

        - Submit a help request to [Postman support](https://support.postman.com/hc/en-us/requests/new/).


        ## Policies


        - [Postman Terms of Service](http://www.postman.com/legal/terms/)

        - [Postman Privacy Policy](https://www.postman.com/legal/privacy-policy/)
    termsOfService: https://www.postman.com/legal/terms/
    contact:
        name: Postman Support
        url: https://www.postman.com/community/
        email: help@postman.com
    license:
        name: Apache 2.0
        url: https://www.apache.org/licenses/LICENSE-2.0.html
    x-api-id: postman_api_key
    x-audience: Developers
    x-newrelic-app-id:
    - 1162449093
servers:
- url: https://api.getpostman.com
paths:
    /apis:
        get:
            tags:
            - API
            - v10
            summary: Get all APIs
            description: >
                Gets information about all APIs in a workspace.


                **Note:**


                This endpoint only returns APIs created or migrated in Postman v10 and higher.
            operationId: getAllApis
            parameters:
            - $ref: '#/components/parameters/limit'
            - $ref: '#/components/parameters/createdBy'
            - $ref: '#/components/parameters/cursor'
            - $ref: '#/components/parameters/apiDescription'
            responses:
                200:
                    $ref: '#/components/responses/getAllApis'
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/apiNotFoundError'
                422:
                    $ref: '#/components/responses/v9Unsupported'
                500:
                    $ref: '#/components/responses/serverError'
        post:
            tags:
            - API
            - v10
            summary: Create an API
            description: Creates an API.
            operationId: createApi
            requestBody:
                $ref: '#/components/requestBodies/createAPI'
            responses:
                200:
                    $ref: '#/components/responses/createApi'
                400:
                    $ref: '#/components/responses/workspaceParamMissingError'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorApi'
                404:
                    $ref: '#/components/responses/workspaceInstanceNotFoundError'
                500:
                    $ref: '#/components/responses/serverError'
        parameters:
        - $ref: '#/components/parameters/workspaceIdApi'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}:
        get:
            tags:
            - API
            - v10
            summary: Get an API
            description: >
                Gets information about an API.


                **Note:**


                API viewers can only use the `versions` option in the `include` query parameter.
            operationId: getAnApi
            parameters:
            - $ref: '#/components/parameters/include'
            responses:
                200:
                    $ref: '#/components/responses/getAnApi'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                404:
                    $ref: '#/components/responses/apiNotFoundError'
                422:
                    $ref: '#/components/responses/v9Unsupported'
                500:
                    $ref: '#/components/responses/serverError'
        put:
            tags:
            - API
            - v10
            summary: Update an API
            description: Updates an API.
            operationId: updateAnApi
            requestBody:
                $ref: '#/components/requestBodies/updateAnApi'
            responses:
                200:
                    $ref: '#/components/responses/updateAnApi'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorApi'
                404:
                    $ref: '#/components/responses/apiNotFoundError'
                422:
                    $ref: '#/components/responses/v9Unsupported'
                500:
                    $ref: '#/components/responses/serverError'
        delete:
            tags:
            - API
            - v10
            summary: Delete an API
            description: Deletes an API.
            operationId: deleteApi
            responses:
                204:
                    description: No Content
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorApi'
                404:
                    $ref: '#/components/responses/apiNotFoundError'
                422:
                    $ref: '#/components/responses/v9Unsupported'
                500:
                    $ref: '#/components/responses/serverError'
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}/collections:
        post:
            tags:
            - API
            - Collection
            - v10
            summary: Add a collection
            description: >
                Adds a collection to an API. To do this, use the following `operationType` values:


                - `COPY_COLLECTION` — Copies a collection from the workspace and adds it to an API.

                - `CREATE_NEW` — Creates a new collection by providing the new collection's content.

                - `GENERATE_FROM_SCHEMA` — Generates the collection from an API schema.
            operationId: addCollection
            requestBody:
                $ref: '#/components/requestBodies/addCollection'
            responses:
                200:
                    $ref: '#/components/responses/addCollection'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorSchema'
                404:
                    $ref: '#/components/responses/apiNotFoundError'
                500:
                    $ref: '#/components/responses/serverError'
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}/collections/{collectionId}:
        get:
            tags:
            - API
            - Collection
            - v10
            summary: Get a collection
            description: >
                Gets a collection attached to an API. You can use the `versionId` query parameter to get a collection published in a version.


                **Note:**


                The `versionId` query parameter is a required parameter for API viewers.
            operationId: getCollection
            parameters:
            - $ref: '#/components/parameters/versionQuery'
            responses:
                200:
                    $ref: '#/components/responses/getCollection'
                400:
                    $ref: '#/components/responses/versionIdMissing'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorApi'
                404:
                    $ref: '#/components/responses/collectionInstanceNotFoundError'
                500:
                    $ref: '#/components/responses/serverError'
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/collectionIdApi'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}/collections/{collectionId}/sync-with-schema-tasks:
        put:
            tags:
            - API
            - Collections
            - v10
            summary: Sync collection with schema
            description: >
                Syncs a collection attached to an API with the API schema.


                This is an asynchronous endpoint that returns an HTTP `202 Accepted` response. The response contains a polling link to the `/apis/{apiId}/tasks/{taskId}` endpoint in the `Location` header.


                **Note:**


                This endpoint only supports the OpenAPI 3 schema type.
            operationId: syncCollectionWithSchema
            responses:
                202:
                    $ref: '#/components/responses/syncCollectionWithSchema'
                400:
                    $ref: '#/components/responses/badRequest'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorSchema'
                404:
                    $ref: '#/components/responses/schemaInstanceNotFoundError'
                422:
                    description: Unprocessable Entity (WebDAV) (RFC 4918)
                    content:
                        application/problem+json:
                            schema: {}
                            examples:
                                Action Not Allowed:
                                    value:
                                        type: actionNotAllowedError
                                        title: Action not allowed
                                        detail: This action is not allowed for git linked APIs
                                Unsupported Schema Type:
                                    value:
                                        type: unsupportedEntityError
                                        title: Unsupported schema
                                        detail: Collection syncing is not supported for the current schema type of the API
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/collectionIdApi'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}/schemas:
        post:
            tags:
            - API
            - Schema
            - v10
            summary: Create a schema
            description: Creates a schema for an API.
            operationId: createApiSchema
            requestBody:
                $ref: '#/components/requestBodies/createApiSchema'
            responses:
                200:
                    $ref: '#/components/responses/createApiSchema'
                400:
                    $ref: '#/components/responses/schemaInvalidParamsError'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/unauthorizedApi'
                404:
                    $ref: '#/components/responses/apiInstanceNotFoundError'
                422:
                    $ref: '#/components/responses/gitLinkedApiError'
                500:
                    $ref: '#/components/responses/serverError'
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}/schemas/{schemaId}:
        get:
            tags:
            - API
            - Schema
            - v10
            summary: Get a schema
            description: >
                Gets information about API schema. You can use the `versionId` query parameter to get a schema published in an API version.


                You can use this API to do the following:


                - Get a schema's metadata.

                - Get all the files in a schema. This only returns the first file in the schema. The endpoint response contains a link to the next set of response results.

                - Get a schema's contents in multi-file or bundled format.


                **Note:**


                The `versionId` query parameter is a **required** parameter for API viewers.
            operationId: getSchema
            parameters:
            - $ref: '#/components/parameters/versionQuery'
            - $ref: '#/components/parameters/schemaOutput'
            responses:
                200:
                    $ref: '#/components/responses/getSchema'
                400:
                    $ref: '#/components/responses/schemaNotLinked'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorApi'
                404:
                    $ref: '#/components/responses/apiInstanceNotFoundError'
                422:
                    $ref: '#/components/responses/gitLinkedApiError'
                500:
                    $ref: '#/components/responses/serverError'
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/schemaId'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}/schemas/{schemaId}/files:
        get:
            tags:
            - API
            - Schema
            - v10
            summary: Get schema files
            description: >
                Gets the files in an API schema. You can use the `versionId` query parameter to get schema files published in an API version.


                **Note:**


                The `versionId` query parameter is a required parameter for API viewers.
            operationId: getSchemaFiles
            parameters:
            - $ref: '#/components/parameters/versionQuery'
            - $ref: '#/components/parameters/limit'
            - $ref: '#/components/parameters/cursor'
            responses:
                200:
                    $ref: '#/components/responses/getSchemaFiles'
                400:
                    $ref: '#/components/responses/schemaNotLinked'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                404:
                    $ref: '#/components/responses/apiInstanceNotFoundError'
                422:
                    $ref: '#/components/responses/gitLinkedApiError'
                500:
                    $ref: '#/components/responses/serverError'
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/schemaId'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}/schemas/{schemaId}/files/{file-path}:
        get:
            tags:
            - API
            - Schema
            - v10
            summary: Get schema file contents
            description: >
                Gets an API schema file contents at the defined path. You can use the `versionId` query parameter to get schema file contents published in an API version.


                **Note:**


                The `versionId` query parameter is a required parameter for API viewers.
            operationId: getSchemaFileContents
            parameters:
            - $ref: '#/components/parameters/versionQuery'
            responses:
                200:
                    $ref: '#/components/responses/getSchemaFileContents'
                400:
                    $ref: '#/components/responses/schemaNotLinked'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                404:
                    $ref: '#/components/responses/apiInstanceNotFoundError'
                422:
                    $ref: '#/components/responses/gitLinkedApiError'
                500:
                    $ref: '#/components/responses/serverError'
        put:
            tags:
            - API
            - Schema
            - v10
            summary: Create or update a schema file
            description: >
                Creates or updates an API schema file.


                **Note:**


                - If the provided file path exists, the file will be updated with the new contents.

                - If the provided file path does **not** exist, then a new schema file will be created.

                - If the file path contains a `/` (forward slash) character, then a folder is created. For example, if the file path is the `dir/schema.json` value, then a `dir` folder is created with the `schema.json` file inside.
            operationId: createOrUpdateSchemaFile
            requestBody:
                $ref: '#/components/requestBodies/createOrUpdateSchemaFile'
            responses:
                200:
                    $ref: '#/components/responses/createUpdateSchemaFile'
                400:
                    $ref: '#/components/responses/schemaNotLinked'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorSchema'
                404:
                    $ref: '#/components/responses/schemaNotFound'
                422:
                    $ref: '#/components/responses/gitLinkedApiError'
                500:
                    $ref: '#/components/responses/serverError'
        delete:
            tags:
            - API
            - Schema
            - v10
            summary: Delete a schema file
            description: Deletes a file in an API schema.
            operationId: deleteSchemaFile
            responses:
                204:
                    description: Deleted
                400:
                    $ref: '#/components/responses/schemaNotLinked'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorSchema'
                404:
                    $ref: '#/components/responses/apiInstanceNotFoundError'
                422:
                    $ref: '#/components/responses/gitLinkedApiError'
                500:
                    $ref: '#/components/responses/serverError'
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/schemaId'
        - $ref: '#/components/parameters/file-path'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}/tasks/{taskId}:
        get:
            tags:
            - API
            - v10
            summary: Get status of an asynchronous task
            description: Gets the status of an asynchronous task.
            operationId: getStatusOfAnAsyncTask
            responses:
                200:
                    $ref: '#/components/responses/getStatusOfAnAsyncTask'
                400:
                    $ref: '#/components/responses/badRequest'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorApi'
                404:
                    $ref: '#/components/responses/taskNotFound'
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/taskId'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}/versions:
        get:
            tags:
            - API
            - Version
            - v10
            summary: Get all versions
            description: Gets all the published versions of an API.
            operationId: getAllVersions
            parameters:
            - $ref: '#/components/parameters/cursor'
            - $ref: '#/components/parameters/limit'
            responses:
                200:
                    $ref: '#/components/responses/getAllVersions'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                404:
                    $ref: '#/components/responses/apiNotFoundError'
                422:
                    $ref: '#/components/responses/v9Unsupported'
                500:
                    $ref: '#/components/responses/serverError'
        post:
            tags:
            - API
            - Version
            - v10
            summary: Create a version
            description: >
                Creates a new API version asynchronously and immediately returns an HTTP `202 Accepted` response. The response contains a polling link to the task status API in the `Location` header.


                This endpoint is equivalent to publishing a version in Postman app, which is the snapshot of API collections and schema at a given point in time.
            operationId: createApiVersion
            requestBody:
                $ref: '#/components/requestBodies/createApiVersion'
            responses:
                202:
                    $ref: '#/components/responses/createApiVersion'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorSchema'
                404:
                    $ref: '#/components/responses/apiNotFoundError'
                422:
                    $ref: '#/components/responses/inconsistentApiState'
                500:
                    $ref: '#/components/responses/serverError'
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}/versions/{versionId}:
        get:
            tags:
            - API
            - Version
            - v10
            summary: Get a version
            description: >
                Gets information about an API version.


                **Note:**


                - For API editors, this endpoint returns an HTTP `302 Found` status code when the version status is pending. It also returns the `/apis/{apiId}/tasks/{taskId}` task status response header.

                - For API viewers, this endpoint returns an HTTP `404 Not Found` when the version status is pending.
            operationId: getApiVersion
            responses:
                200:
                    $ref: '#/components/responses/getVersion'
                302:
                    $ref: '#/components/responses/versionStatusPending'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                404:
                    $ref: '#/components/responses/apiVersionNotFound'
                500:
                    $ref: '#/components/responses/serverError'
        put:
            tags:
            - API
            - Version
            - v10
            summary: Update a version
            description: >
                Updates an API version.


                **Note:**


                This endpoint returns an HTTP `404 Not Found` response when an API version is pending publication.
            operationId: updateApiVersion
            requestBody:
                $ref: '#/components/requestBodies/updateVersion'
            responses:
                200:
                    $ref: '#/components/responses/updateVersion'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorApi'
                404:
                    $ref: '#/components/responses/apiVersionNotFound'
                500:
                    $ref: '#/components/responses/serverError'
        delete:
            tags:
            - API
            - Version
            - v10
            summary: Delete a version
            description: >
                Deletes an API version.


                **Note:**


                This endpoint returns an HTTP `404 Not Found` response when an API version is pending publication.
            operationId: deleteApiVersion
            responses:
                204:
                    description: No Content
                400:
                    $ref: '#/components/responses/apiVersionInstanceNotFoundError'
                401:
                    $ref: '#/components/responses/unauthorizedApi'
                403:
                    $ref: '#/components/responses/forbiddenErrorApi'
                404:
                    $ref: '#/components/responses/apiVersionNotFound'
                500:
                    $ref: '#/components/responses/serverError'
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/versionId'
        - $ref: '#/components/parameters/Accept'
    /apis/{apiId}/versions/{apiVersionId}/unclassified:
        get:
            tags:
            - API
            - Relations
            summary: Get unclassified relations
            description: >
                **This endpoint is deprecated.**


                Gets all of an API version's unclassified relations.


                Unclassified relations are used for documentation and testing. This is the default relation type.
            operationId: getUnclassifiedRelations
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                unclassified:
                                - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                                    name: Test
                                    updatedAt: 2023-01-19T14:50:05.000Z
                                    collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
    /apis/{apiId}/versions/{apiVersionId}/contracttest:
        get:
            tags:
            - API
            - Relations
            summary: Get contract test relations
            description: >
                **This endpoint is deprecated.**
            operationId: getContractTestRelations
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                contracttest:
                                - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                                    name: Contract Test
                                    updatedAt: 2019-08-29T10:18:11.000Z
                                    collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
    /apis/{apiId}/versions/{apiVersionId}/documentation:
        get:
            tags:
            - API
            - Relations
            summary: Get documentation relations
            description: >
                **This endpoint is deprecated.**

                 Gets an API version's documentation relations.
            operationId: getDocumentationRelations
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                documentation:
                                - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                                    name: Test Collection
                                    updatedAt: 2022-07-08T20:31:06.000Z
                                    collectionId: 12345678-203ec937-0c09-42e4-b1d1-553bd4ea9e42
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
    /apis/{apiId}/versions/{apiVersionId}/environment:
        get:
            tags:
            - API
            - Relations
            summary: Get environment relations
            description: >
                **This endpoint is deprecated.**


                Gets an API version's environment relations.
            operationId: getEnvironmentRelations
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                environment:
                                - id: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                    name: Test Environment
                                    updatedAt: 2022-07-08T20:31:30.000Z
                                    environmentId: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
    /apis/{apiId}/versions/{apiVersionId}/integrationtest:
        get:
            tags:
            - API
            - Relations
            summary: Get integration test relations
            description: >
                **This endpoint is deprecated**.
            operationId: getIntegrationTestRelations
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                integrationtest:
                                - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                                    name: C test
                                    updatedAt: 2019-08-29T10:18:11.000Z
                                    collectionId: 12345678-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
    /apis/{apiId}/versions/{apiVersionId}/mock:
        get:
            tags:
            - API
            - Relations
            summary: Get mock server relations
            description: >
                **This endpoint is deprecated.**


                Gets an API version's mock server relations.
            operationId: getMockServerRelations
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                mock:
                                - id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    name: Test Mock
                                    updatedAt: 2022-07-25T20:48:13.000Z
                                    mockId: e3d951bf-873f-49ac-a658-b2dcb91d3289
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
    /apis/{apiId}/versions/{apiVersionId}/monitor:
        get:
            tags:
            - API
            - Relations
            summary: Get monitor relations
            description: >
                **This endpoint is deprecated.**


                Gets an API version's monitor relations.
            operationId: getMonitorRelations
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                monitor:
                                - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    monitorId: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    name: Test Monitor
                                    updatedAt: 2022-07-10T05:00:25.066Z
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
    /apis/{apiId}/versions/{apiVersionId}/relations:
        get:
            tags:
            - API
            - Relations
            summary: Get all linked relations
            description: >
                **This endpoint is deprecated.**


                Gets all of an API version's relations.


                **Note:**


                In Postman v10 and higher, this endpoint returns the following:


                - The `unclassified` relation is for documentation and testing. This is the default relation type.

                - The `apiDefinition` relation is the relation used for API definitions.
            operationId: getLinkedRelations
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                relations:
                                    apiDefintion:
                                        16bb367e-fafb-4ef3-933b-ee3d971866fb:
                                            id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                                    unclassified:
                                        b9bccf0f-e06a-433d-b556-a3cd158f0270:
                                            id: b9bccf0f-e06a-433d-b556-a3cd158f0270
                                            name: Test Collection
                                            createdAt: 2023-01-30T17:41:50.000Z
                                            updatedAt: 2023-01-19T14:50:05.000Z
                                    schema:
                                        16bb367e-fafb-4ef3-933b-ee3d971866fb:
                                            id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        post:
            tags:
            - API
            - Relations
            summary: Create relations
            description: >
                **This endpoint is deprecated.**


                Creates a new relation for an API version.
            operationId: createRelations
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            unclassified:
                            - 12345678-b4abc083-3ee2-4fc2-8959-29a7653a1c91
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                unclassified:
                                - 2e006451-e819-443f-97bc-d1635e51007f
                400:
                    $ref: '#/components/responses/invalidParamsError'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
    /apis/{apiId}/versions/{apiVersionId}/schemas:
        post:
            tags:
            - API
            - Schema
            summary: Create a schema
            description: >
                **This endpoint is deprecated.**


                Creates an API definition.
            operationId: createSchema
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            schema:
                                language: json
                                schema: >-
                                    {
                                        "openapi": "3.0.0",
                                        "info": {
                                            "version": "1.0.0",
                                            "title": "Test API"
                                        },
                                        "servers": [
                                            {
                                                "url": "http://locahost:3000"
                                            }
                                        ],
                                        "paths": {
                                            "/user": {
                                                "get": {
                                                    "summary": "List all users",
                                                    "operationId": "listUser",
                                                    "parameters": [
                                                        {
                                                            "name": "id",
                                                            "in": "query",
                                                            "required": true,
                                                            "description": "The user's ID.",
                                                            "example": 1234,
                                                            "schema": {
                                                                "type": "integer",
                                                                "format": "int32"
                                                            }
                                                        }
                                                    ],
                                                    "responses": {
                                                        "200": {
                                                            "description": "Information about the user.",
                                                            "headers": {
                                                                "x-next": {
                                                                    "description": "A link to the next page of responses.",
                                                                    "schema": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "content": {
                                                                "application/json": {
                                                                    "schema": {
                                                                        "$ref": "#/components/schemas/User"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "components": {
                                            "schemas": {
                                                "User": {
                                                    "type": "object",
                                                    "required": [
                                                        "id",
                                                        "name"
                                                    ],
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "tag": {
                                                            "type": "string"
                                                        }
                                                    }
                                                },
                                                "Error": {
                                                    "type": "object",
                                                    "required": [
                                                        "code",
                                                        "message"
                                                    ],
                                                    "properties": {
                                                        "code": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                        },
                                                        "message": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                type: openapi3
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                schema:
                                    language: json
                                    type: openapi3
                                    id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
                                    createdBy: 12345678
                                    updatedBy: 12345678
                                    createdAt: 2021-05-22T13:17:07.000Z
                                    updatedAt: 2021-05-22T13:17:07.000Z
                                    apiVersion: ad810c39-df60-434e-a76f-a2192cd8d81f
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: instanceAlreadyExists
                                    message: A schema already exists for this API Version
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
    /apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}:
        get:
            tags:
            - API
            - Schema
            summary: Get a schema
            description: >
                **This endpoint is deprecated.**


                Gets information about an API's definition.
            operationId: getSchema
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                schema:
                                    id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                                    type: openapi3
                                    language: json
                                    createdAt: 2022-07-01T20:12:31.000Z
                                    updatedAt: 2022-07-01T20:13:04.000Z
                                    createdBy: 12345678
                                    updatedBy: 12345678
                                    schema: >-
                                        {
                                            "openapi": "3.0.0",
                                            "info": {
                                                "version": "1.0.0",
                                                "title": "Test API"
                                            },
                                            "servers": [
                                                {
                                                    "url": "http://locahost:3000"
                                                }
                                            ],
                                            "paths": {
                                                "/user": {
                                                    "get": {
                                                        "summary": "List all users",
                                                        "operationId": "listUser",
                                                        "parameters": [
                                                            {
                                                                "name": "id",
                                                                "in": "query",
                                                                "required": true,
                                                                "description": "The user's ID.",
                                                                "example": 1234,
                                                                "schema": {
                                                                    "type": "integer",
                                                                    "format": "int32"
                                                                }
                                                            }
                                                        ],
                                                        "responses": {
                                                            "200": {
                                                                "description": "Information about the user.",
                                                                "headers": {
                                                                    "x-next": {
                                                                        "description": "A link to the next page of responses.",
                                                                        "schema": {
                                                                            "type": "string"
                                                                        }
                                                                    }
                                                                },
                                                                "content": {
                                                                    "application/json": {
                                                                        "schema": {
                                                                            "$ref": "#/components/schemas/User"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "components": {
                                                "schemas": {
                                                    "User": {
                                                        "type": "object",
                                                        "required": [
                                                            "id",
                                                            "name"
                                                        ],
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "format": "int64"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "tag": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "Error": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "format": "int32"
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    apiVersion: a9879d02-74bf-425a-bbec-6d27aa135507
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        put:
            tags:
            - API
            - Schema
            summary: Update a schema
            description: >
                **This endpoint is deprecated in Postman v10 and higher.**


                Updates an API definition.
            operationId: updateSchema
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            schema:
                                language: yaml
                                schema: >
                                    openapi: 3.0.0

                                    info:
                                        version: 1.0.0
                                        title: Test API
                                    servers:
                                        - url: http://localhost:3000
                                    paths:
                                        /user:
                                            get:
                                                summary: List all users
                                                operationId: listUser
                                                tags:
                                                    - user
                                                parameters:
                                                    - name: id
                                                        in: query
                                                        required: true
                                                        description: The user's ID.
                                                        example: 1234
                                                        schema:
                                                            type: integer
                                                            format: int32
                                                responses:
                                                    '200':
                                                        description: Information about the user.
                                                        headers:
                                                            x-next:
                                                                description: A link to the next page of responses.
                                                                schema:
                                                                    type: string
                                                        content:
                                                            application/json:
                                                                schema:
                                                                    $ref: '#/components/schemas/User' 
                                    components:
                                        schemas:
                                         User:
                                                type: object
                                                required:
                                                    - id
                                                    - name
                                                properties:
                                                    id:
                                                        type: integer
                                                        format: int32
                                         Error:
                                                type: object
                                                required:
                                                    - code
                                                    - message
                                                properties:
                                                    code:
                                                        type: integer
                                                        format: int32
                                                    message:
                                                        type: string
                                type: openapi3
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                schema:
                                    id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                                    language: yaml
                                    apiVersion: a9879d02-74bf-425a-bbec-6d27aa135507
                                    type: openapi3
                                    createdBy: 12345678
                                    updatedBy: 12345678
                                    createdAt: 2021-05-22T13:17:07.000Z
                                    updatedAt: 2021-05-22T13:17:07.000Z
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
        - $ref: '#/components/parameters/schemaId'
    /apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}/collections:
        post:
            tags:
            - API
            - Schema
            summary: Create a collection from a schema
            description: >
                **This endpoint is deprecated.**


                Creates a collection and links it to an API as one or multiple relations.
            operationId: createCollectionFromSchema
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            name: Test Collection
                            relations:
                            - type: documentation
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                collection:
                                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                relations:
                                - type: documentation
                                    id: d86b6c97-fdf9-4c37-825a-49b0223913c7
                400:
                    $ref: '#/components/responses/invalidParamsError'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
        - $ref: '#/components/parameters/schemaId'
        - $ref: '#/components/parameters/workspaceQueryId'
    /apis/{apiId}/versions/{apiVersionId}/test:
        get:
            tags:
            - API
            - Relations
            summary: Get all test relations
            description: >
                **This endpoint is deprecated.**


                Gets all of an API version's test relations.
            operationId: getTestRelations
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                test:
                                - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name: Test Collection
                                    updatedAt: 2022-07-08T18:32:23.000Z
                                    collectionId: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
    /apis/{apiId}/versions/{apiVersionId}/testsuite:
        get:
            tags:
            - API
            - Relations
            summary: Get test suite relations
            description: >
                **This endpoint is deprecated**.
            operationId: getTestSuiteRelations
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                testsuite:
                                - collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                                    id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                                    name: C test
                                    updatedAt: 2019-08-29T10:18:11.000Z
                                - collectionId: 7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725
                                    id: 521b0486-ab91-4d3a-9189-43c9380a0533
                                    name: C1
                                    updatedAt: 2019-08-29T11:40:39.000Z
                400:
                    $ref: '#/components/responses/instanceNotFoundApi'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
    /apis/{apiId}/versions/{apiVersionId}/{relationType}/{entityId}/syncWithSchema:
        put:
            tags:
            - API
            - Relations
            summary: Sync API relations with definition
            description: >
                **This endpoint is deprecated.**


                Syncs an API version's relation with the API's definition.
            operationId: syncRelationsWithSchema
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                success: true
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Validation Failed:
                                    value:
                                        error:
                                            name: validationFailed
                                            message: Unable to validate. Only the OpenAPI 3.0 schema format is supported.
                                Invalid Relation:
                                    value:
                                        error:
                                            name: invalidRelationTypeError
                                            message: The provided relation type is invalid.
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
        parameters:
        - $ref: '#/components/parameters/apiId'
        - $ref: '#/components/parameters/apiVersionId'
        - $ref: '#/components/parameters/relationType'
        - $ref: '#/components/parameters/entityId'
    /audit/logs:
        get:
            tags:
            - Audit Logs
            summary: Get team audit logs
            description: Gets a list of your team's generated audit events. For a complete list of all audit events, read our [Utilizing audit logs](https://learning.postman.com/docs/administration/audit-logs/) documentation.
            operationId: getAuditLogs
            parameters:
            - name: since
                in: '"query"'
                description: Return logs created after the given time, in YYYY-MM-DD format.
                required: false
                schema:
                    name: since
                    in: '"query"'
                    description: Return logs created after the given time, in YYYY-MM-DD format.
                    required: false
                example: 2022-08-30
            - name: until
                in: '"query"'
                description: Return logs created before the given time, in YYYY-MM-DD format.
                required: false
                schema:
                    name: until
                    in: '"query"'
                    description: Return logs created before the given time, in YYYY-MM-DD format.
                    required: false
                example: 2022-09-15
            - name: limit
                in: '"query"'
                description: The maximum number of audit events to return at once.
                required: false
                schema:
                    name: limit
                    in: '"query"'
                    description: The maximum number of audit events to return at once.
                    required: false
                example: 50
            - name: cursor
                in: '"query"'
                description: The cursor to get the next set of results.
                required: false
                schema:
                    name: cursor
                    in: '"query"'
                    description: The cursor to get the next set of results.
                    required: false
                example: eyJzY2hlbWUiOiJjdXJzb3JfcGF0aF92ZXJiIiwiZGlyZWN0aQ==
            - name: order_by
                in: '"query"'
                description: Return the records in ascending (`ASC`) or descending (`DESC`) order.
                required: false
                schema:
                    name: order_by
                    in: '"query"'
                    description: Return the records in ascending (`ASC`) or descending (`DESC`) order.
                    required: false
                example: desc
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                trails:
                                - id: 12345678
                                    ip: 192.0.2.0
                                    userAgent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36
                                    action: user.login_google_success
                                    timestamp: 2022-08-31T15:19:32.000Z
                                    message: Taylor Lee successfully logged in using the Google OAuth.
                                    data:
                                        actor:
                                            name: Taylor Lee
                                            username: taylor-lee
                                            email: taylor.lee@example.com
                                            id: 12345678
                                            active: true
                                        user:
                                            name: Taylor Lee
                                            username: taylor-lee
                                            email: taylor.lee@example.com
                                            id: 12345678
                                        team:
                                            name: Test-Team
                                            id: 1234
                                - id: 87654321
                                    ip: 192.0.2.1
                                    userAgent: PostmanRuntime/7.29.0 Postman/5.5.4 ChromeApp
                                    action: user.login_password_success
                                    timestamp: 2022-09-01T06:30:21.000Z
                                    message: Alex Cruz successfully logged in using the Postman password.
                                    data:
                                        actor:
                                            name: Alex Cruz
                                            username: alex-cruz
                                            email: alex.cruz@example.com
                                            id: 87654321
                                            active: true
                                        user:
                                            name: Alex Cruz
                                            username: alex-cruz
                                            email: alex.cruz@example.com
                                            id: 87654321
                                        team:
                                            name: Test-Team
                                            id: 1234
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /collections:
        get:
            tags:
            - Collections
            summary: Get all collections
            description: Gets all of your [collections](https://www.getpostman.com/docs/collections). The response includes all of your subscribed collections.
            operationId: allCollections
            parameters:
            - $ref: '#/components/parameters/workspaceQueryId'
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                collections:
                                - id: dac5eac9-148d-a32e-b76b-3edee9da28f7
                                    name: Cloud API
                                    owner: 12345678
                                    createdAt: 2022-04-12T10:29:46.000Z
                                    updatedAt: 2022-04-12T10:29:56.000Z
                                    uid: 12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7
                                    isPublic: true
                                - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name: Test Collection
                                    owner: 12345678
                                    createdAt: 2022-01-13T10:21:46.000Z
                                    updatedAt: 2022-02-12T11:29:56.000Z
                                    uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    isPublic: false
                                    fork:
                                        label: Test Fork
                                        createdAt: 2022-06-16T19:51:44.069Z
                                        from: 12345678-f2f0cb8f-609d-443f-913c-9831187c326e
                                - id: f695cab7-6878-eb55-7943-ad88e1ccfd65
                                    name: Postman Echo
                                    owner: 12345678
                                    createdAt: 2021-04-11T09:18:26.000Z
                                    updatedAt: 2022-05-01T15:29:32.000Z
                                    uid: 12345678-f695cab7-6878-eb55-7943-ad88e1ccfd65
                                    isPublic: true
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        post:
            tags:
            - Collections
            summary: Create a collection
            description: >
                Creates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html).


                **Note:**


                - For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):
                        - `info` object — Use the `definitions.info` entry.
                        - `item` object — Use the `definitions.items` entry.
                - For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
            operationId: createCollection
            parameters:
            - $ref: '#/components/parameters/workspaceQueryId'
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            collection:
                                info:
                                    name: Test Collection
                                    description: This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.
                                    schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                item:
                                - name: Test GET Response
                                    event:
                                    - listen: test
                                        script:
                                            id: 7d2334fc-a84a-4c3d-b26c-7529afa4c0ae
                                            exec:
                                            - pm.test("Status code is 200", function () {
                                            - '    pm.response.to.have.status(200);'
                                            - '});'
                                            type: text/javascript
                                    request:
                                        url: https://echo.getpostman.com/headers
                                        method: GET
                                        header:
                                        - key: Content-Type
                                            value: application/json
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                collection:
                                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name: Test Collection
                                    uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Bad Request:
                                    value:
                                        error:
                                            name: instanceFoundError
                                            message: The specified item already exists.
                                            details:
                                                item: collection
                                                id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                Malformed Request:
                                    value:
                                        error:
                                            name: malformedRequestError
                                            message: Found 1 errors with the supplied collection.
                                            details:
                                            - ": must have required property 'info'"
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /collections/fork/{collectionId}:
        post:
            tags:
            - Collections
            summary: Create a fork
            description: Creates a [fork](https://learning.postman.com/docs/collaborating-in-postman/version-control/#creating-a-fork) from an existing collection into a workspace.
            operationId: createAFork
            parameters:
            - name: workspace
                in: '"query"'
                description: The workspace ID in which to fork the collection.
                required: true
                schema:
                    name: workspace
                    in: '"query"'
                    description: The workspace ID in which to fork the collection.
                    required: true
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            label: Test Fork
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                collection:
                                    id: 09547fef-a9a5-4e00-998b-aa563e8db69a
                                    name: Test Collection
                                    fork:
                                        label: Test Fork
                                        createdAt: 2022-06-16T19:51:44.069Z
                                        from: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    uid: 12345678-09547fef-a9a5-4e00-998b-aa563e8db69a
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundCollection'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/collectionId'
    /collections/merge:
        post:
            tags:
            - Collections
            summary: Merge a fork
            description: Merges a forked collection back into its destination collection.
            operationId: mergeAFork
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            strategy: deleteSource
                            source: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                            destination: 12345678-09547fef-a9a5-4e00-998b-aa563e8db69a
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                collection:
                                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundCollection'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /collections/{collectionId}:
        get:
            tags:
            - Collections
            summary: Get a collection
            description: Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
            operationId: singleCollection
            parameters:
            - $ref: '#/components/parameters/collectionAccessKeyQuery'
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                collection:
                                    info:
                                        name: Test Collection
                                        description: This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.
                                        _postman_id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                        schema: https://schema.getpostman.com/json/collection/v2.0.0/collection.json
                                        updatedAt: 2022-06-16T20:21:13.000Z
                                        uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    item:
                                    - name: Test GET Response
                                        id: 82ee981b-e19f-962a-401e-ea34ebfb4848
                                        event:
                                        - listen: test
                                            script:
                                                id: 7d2334fc-a84a-4c3d-b26c-7529afa4c0ae
                                                exec:
                                                - pm.test("Status code is 200", function () {
                                                - '    pm.response.to.have.status(200);'
                                                - '});'
                                                type: text/javascript
                                        request:
                                            url: https://echo.getpostman.com/headers
                                            method: GET
                                            header:
                                            - key: Content-Type
                                                value: application/json
                                        response: []
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: instanceNotFoundError
                                    message: We could not find the collection you are looking for
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        put:
            tags:
            - Collections
            summary: Update a collection
            description: >
                Updates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html).


                **Note:**


                - For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):
                        - `info` object — Use the `definitions.info` entry.
                        - `item` object — Use the `definitions.items` entry.
                - For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).


                ### Important


                Use caution when using this endpoint. The system will **replace** the existing collection with the values passed in the request body.
            operationId: updateCollection
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            collection:
                                info:
                                    name: Test Collection
                                    description: This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.
                                    schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                item:
                                - name: Test POST Response
                                    event:
                                    - listen: test
                                        script:
                                            id: 7d2334fc-a84a-4c3d-b26c-7529afa4c0ae
                                            exec:
                                            - pm.test("Status code is 200", function () {
                                            - '    pm.response.to.have.status(200);'
                                            - '});'
                                            type: text/javascript
                                    request:
                                        url: https://echo.getpostman.com/headers
                                        method: POST
                                        header:
                                        - key: Content-Type
                                            value: application/json
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                collection:
                                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name: Test Collection
                                    uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Malformed Request:
                                    value:
                                        error:
                                            name: malformedRequestError
                                            message: Found 2 errors with the supplied collection.
                                            details:
                                            - ": must have required property 'item'"
                                            - "info: must have required property 'schema'"
                                Collection ID Mismatch:
                                    value:
                                        error:
                                            name: collectionMismatchError
                                            message: The collection ID in the path does not match the collection ID in the request body.
                401:
                    $ref: '#/components/responses/unauthorized'
                403:
                    $ref: '#/components/responses/forbiddenError'
                404:
                    $ref: '#/components/responses/instanceNotFoundCollection'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        delete:
            tags:
            - Collections
            summary: Delete a collection
            description: Deletes a collection.
            operationId: deleteCollection
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                collection:
                                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundCollection'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        patch:
            tags:
            - Collections
            summary: Update a collection name or description
            description: Updates the name or description of a collection.
            operationId: updateCollectionNameDescription
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            collection:
                                info:
                                    name: Test Collection v2
                                    description: This is a sample collection that makes a request to the Postman Echo service. It returns a list of request headers sent by an HTTP client.
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                collection:
                                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name: Test Collection v2
                                    description: This is a sample collection that makes a request to the Postman Echo service. It returns a list of request headers sent by an HTTP client.
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: badRequest
                                    message: You can only update the name and description of a collection's "info" object.
                401:
                    $ref: '#/components/responses/unauthorized'
                403:
                    $ref: '#/components/responses/forbiddenError'
                404:
                    $ref: '#/components/responses/instanceNotFoundCollection'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/collectionId'
    /environments:
        get:
            tags:
            - Environments
            summary: Get all environments
            description: Gets information about all of your [environments](https://learning.postman.com/docs/sending-requests/managing-environments/).
            operationId: allEnvironments
            parameters:
            - $ref: '#/components/parameters/workspaceQueryId'
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                environments:
                                - id: 5daabc50-8451-43f6-922d-96b403b4f28e
                                    name: Test Environment
                                    createdAt: 2020-09-23T14:31:18.000Z
                                    updatedAt: 2020-12-04T14:13:40.000Z
                                    owner: 12345678
                                    uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                    isPublic: false
                                - id: 7d786cc8-142b-4d62-b5a5-872afc37ad16
                                    name: Environment Scanner
                                    createdAt: 2020-02-04T19:34:23.000Z
                                    updatedAt: 2020-08-12T13:34:06.000Z
                                    owner: 12345678
                                    uid: 12345678-7d786cc8-142b-4d62-b5a5-872afc37ad16
                                    isPublic: false
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundEnvironment'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        post:
            tags:
            - Environments
            summary: Create an environment
            description: Creates an environment.
            operationId: createEnvironment
            parameters:
            - $ref: '#/components/parameters/workspaceQueryId'
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            environment:
                                name: Test Environment
                                values:
                                - key: apiKey
                                    value: PMAK-1234-5678-0987-6543
                                    enabled: true
                                    type: secret
                                - key: variable_1
                                    value: The variable_1 value.
                                    enabled: false
                                    type: default
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                environment:
                                    id: 5daabc50-8451-43f6-922d-96b403b4f28e
                                    name: Test Environment
                                    uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: malformedRequestError
                                    message: Found 1 errors with the supplied environment.
                                    details:
                                    - ": must have required property 'environment'"
                401:
                    $ref: '#/components/responses/unauthorized'
                403:
                    $ref: '#/components/responses/forbiddenError'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /environments/{environmentId}:
        get:
            tags:
            - Environments
            summary: Get an environment
            description: Gets information about an environment.
            operationId: singleEnvironment
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                environment:
                                    id: 5daabc50-8451-43f6-922d-96b403b4f28e
                                    name: Test Environment
                                    owner: 12345678
                                    createdAt: 2020-11-05T13:59:22.000Z
                                    updatedAt: 2020-11-05T13:59:23.000Z
                                    values:
                                    - key: apiKey
                                        value: PMAK-1234-5678-0987-6543
                                        enabled: true
                                        type: secret
                                    isPublic: false
                400:
                    $ref: '#/components/responses/instanceNotFoundEnvironment'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        put:
            tags:
            - Environments
            summary: Update an environment
            description: Updates an environment.
            operationId: updateEnvironment
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            environment:
                                name: Test A Environment
                                values:
                                - key: variable_a
                                    value: The variable_a value.
                                    enabled: false
                                    type: default
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                environment:
                                    id: 5daabc50-8451-43f6-922d-96b403b4f28e
                                    name: Test A Environment
                                    uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: malformedRequestError
                                    message: 'Invalid type: null (expected object) at environment.values.0'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        delete:
            tags:
            - Environments
            summary: Delete an environment
            description: Deletes an environment.
            operationId: deleteEnvironment
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                environment:
                                    id: 5daabc50-8451-43f6-922d-96b403b4f28e
                                    uid: 1234567-5daabc50-8451-43f6-922d-96b403b4f28e
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundEnvironment'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/environmentId'
    /import/exported:
        post:
            tags:
            - Import
            summary: Import an exported Postman data dump file
            description: >
                **This endpoint is deprecated.**


                Imports exported Postman data. This endpoint only accepts [export data dump files](https://postman.postman.co/me/export).


                For more information, read our [Exporting data dumps](https://learning.postman.com/docs/getting-started/importing-and-exporting-data/#exporting-data-dumps) documentation.
            operationId: importExportedData
            requestBody:
                content:
                    multipart/form-data:
                        schema: {}
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                collections:
                                - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name: Test API
                                    uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Invalid Parameters:
                                    value:
                                        error:
                                            name: invalidParamsError
                                            message: The request body has invalid values for the type parameter. Value must be one of file, string, json
                                            details:
                                                param: type
                                Missing Parameter:
                                    value:
                                        error:
                                            name: paramMissingError
                                            message: The request body is missing a value for the type parameter. Check your request and try again.
                                            details:
                                                param: type
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
            deprecated: true
    /import/openapi:
        post:
            tags:
            - Import
            summary: Import an OpenAPI definition
            description: Imports an OpenAPI definition into Postman as a new [Postman Collection](https://learning.postman.com/docs/getting-started/creating-the-first-collection/).
            operationId: importExternalApiSpecification
            parameters:
            - $ref: '#/components/parameters/workspaceQueryId'
            requestBody:
                content:
                    application/json:
                        schema: {}
                        examples:
                            Import a Stringified OpenAPI Definition:
                                value:
                                    type: string
                                    input: >-
                                        {
                                            "openapi": "3.0.0",
                                            "info": {
                                                "version": "1.0.0",
                                                "title": "Test API"
                                            },
                                            "servers": [
                                                {
                                                    "url": "http://locahost:3000"
                                                }
                                            ],
                                            "paths": {
                                                "/user": {
                                                    "get": {
                                                        "summary": "List all users",
                                                        "operationId": "listUser",
                                                        "parameters": [
                                                            {
                                                                "name": "id",
                                                                "in": "query",
                                                                "required": true,
                                                                "description": "The user's ID.",
                                                                "example": 1234,
                                                                "schema": {
                                                                    "type": "integer",
                                                                    "format": "int32"
                                                                }
                                                            }
                                                        ],
                                                        "responses": {
                                                            "200": {
                                                                "description": "Information about the user.",
                                                                "headers": {
                                                                    "x-next": {
                                                                        "description": "A link to the next page of responses.",
                                                                        "schema": {
                                                                            "type": "string"
                                                                        }
                                                                    }
                                                                },
                                                                "content": {
                                                                    "application/json": {
                                                                        "schema": {
                                                                            "$ref": "#/components/schemas/User"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "components": {
                                                "schemas": {
                                                    "User": {
                                                        "type": "object",
                                                        "required": [
                                                            "id",
                                                            "name"
                                                        ],
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "format": "int64"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "tag": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "Error": {
                                                        "type": "object",
                                                        "required": [
                                                            "code",
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "code": {
                                                                "type": "integer",
                                                                "format": "int32"
                                                            },
                                                            "message": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                            Import an OpenAPI Definition:
                                value:
                                    type: json
                                    input:
                                        openapi: 3.0.0
                                        info:
                                            version: 1.0.0
                                            title: Test API
                                        servers:
                                        - url: http://locahost:3000
                                        paths:
                                            /user:
                                                get:
                                                    summary: List all users
                                                    operationId: listUser
                                                    parameters:
                                                    - name: id
                                                        in: query
                                                        required: true
                                                        description: The user's ID.
                                                        example: 1234
                                                        schema:
                                                            type: integer
                                                            format: int32
                                                    responses:
                                                        200:
                                                            description: Information about the user.
                                                            headers:
                                                                x-next:
                                                                    description: A link to the next page of responses.
                                                                    schema:
                                                                        type: string
                                                            content:
                                                                application/json:
                                                                    schema:
                                                                        type: object
                                                                        required:
                                                                        - id
                                                                        - name
                                                                        properties:
                                                                            id:
                                                                                type: integer
                                                                                format: int64
                                                                            name:
                                                                                type: string
                                                                            tag:
                                                                                type: string
                            Import an OpenAPI Definition with Options:
                                value:
                                    type: json
                                    options:
                                        folderStrategy: Path
                                        disableOptionalParameters: true
                                        exampleParametersResolution: Schema
                                    input:
                                        openapi: 3.0.0
                                        info:
                                            version: 1.0.0
                                            title: Test API
                                        servers:
                                        - url: http://locahost:3000
                                        paths:
                                            /user:
                                                get:
                                                    summary: List all users
                                                    operationId: listUser
                                                    parameters:
                                                    - name: id
                                                        in: query
                                                        required: true
                                                        description: The user's ID.
                                                        example: 1234
                                                        schema:
                                                            type: integer
                                                            format: int32
                                                    responses:
                                                        200:
                                                            description: Information about the user.
                                                            headers:
                                                                x-next:
                                                                    description: A link to the next page of responses.
                                                                    schema:
                                                                        type: string
                                                            content:
                                                                application/json: ''
                                                                schema:
                                                                    type: object
                                                                    required:
                                                                    - id
                                                                    - name
                                                                    properties:
                                                                        id:
                                                                            type: integer
                                                                            format: int64
                                                                        name:
                                                                            type: string
                                                                        tag:
                                                                            type: string
                    multipart/form-data:
                        schema: {}
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                collections:
                                - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name: Test Collection
                                    uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                environments: []
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Invalid Parameters:
                                    value:
                                        error:
                                            name: invalidParamsError
                                            message: The request body has invalid values for the type parameter. Value must be one of file, string, json
                                            details:
                                                param: type
                                Missing Parameters:
                                    value:
                                        error:
                                            name: paramMissingError
                                            message: The request body is missing a value for the type parameter. Check your request and try again.
                                            details:
                                                param: type
                                Malformed Request:
                                    value:
                                        error:
                                            name: invalidSchemaError
                                            message: Specification must contain a semantic version number of the OAS specification
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /me:
        get:
            tags:
            - User
            summary: Get authenticated user
            description: >
                Gets information about the authenticated user.


                **Note:**


                This API returns a different response for users with the [Guest role](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
            operationId: apiKeyOwner
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Successful Response:
                                    value:
                                        user:
                                            id: 12345678
                                            username: taylor-lee
                                            email: taylor.lee@example.com
                                            fullName: Taylor Lee
                                            avatar: https://example.com/user/r5u9qpvmujfjf6lbqmga.jpg
                                            isPublic: true
                                        operations:
                                        - name: mock_usage
                                            limit: 1000000
                                            usage: 110276
                                            overage: 0
                                        - name: monitor_request_runs
                                            limit: 10000000
                                            usage: 1141750
                                            overage: 0
                                        - name: api_usage
                                            limit: 1000000
                                            usage: 16240
                                            overage: 0
                                        - name: custom_domains
                                            limit: 25
                                            usage: 25
                                            overage: 0
                                        - name: serverless_requests
                                            limit: 10000
                                            usage: 0
                                            overage: 0
                                        - name: integrations
                                            limit: 5000
                                            usage: 1018
                                            overage: 0
                                        - name: cloud_agent_requests
                                            limit: 1000000
                                            usage: 1615
                                            overage: 0
                                Guest User Response:
                                    value:
                                        user:
                                            id: 12345678
                                            username: taylor-lee
                                            email: taylor.lee@example.com
                                            fullName: Taylor Lee
                                            avatar: https://example.com/user/r5u9qpvmujfjf6lbqmga.jpg
                                            isPublic: true
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /mocks:
        get:
            tags:
            - Mocks
            summary: Get all mock servers
            description: Gets all mock servers.
            operationId: getMocks
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                mocks:
                                - id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    owner: 12345678
                                    uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    mockUrl: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                                    name: Test Mock
                                    config:
                                        headers: []
                                        matchBody: false
                                        matchQueryParams: true
                                        matchWildcards: true
                                        delay:
                                            type: fixed
                                            duration: 140000
                                        serverResponseId: ''
                                    createdAt: 2022-07-25T20:54:30.000Z
                                    updatedAt: 2022-07-25T20:54:30.000Z
                                    isPublic: false
                                    environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        post:
            tags:
            - Mocks
            summary: Create a mock server
            description: >
                **In Postman v10 and higher you cannot create mocks for collections added to an API definition.**


                Creates a mock server in a collection.
            operationId: createMock
            parameters:
            - $ref: '#/components/parameters/workspaceQueryId'
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            mock:
                                collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                name: Test Mock
                required: true
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                mock:
                                    id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    owner: 12345678
                                    uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    mockUrl: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                                    name: Test Mock
                                    config:
                                        headers: []
                                        matchBody: false
                                        matchQueryParams: true
                                        matchWildcards: true
                                        delay: ''
                                        serverResponseId: ''
                                    createdAt: 2022-06-09T19:00:39.000Z
                                    updatedAt: 2022-06-09T19:00:39.000Z
                                    environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: paramMissingError
                                    message: Parameter is missing in the request.
                                    details:
                                        param:
                                        - collection
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /mocks/{mockId}:
        get:
            tags:
            - Mocks
            summary: Get a mock server
            description: Gets information about a mock server.
            operationId: getMock
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                mock:
                                    id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    owner: 12345678
                                    uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    mockUrl: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                                    name: Test Mock
                                    config:
                                        headers: []
                                        matchBody: false
                                        matchQueryParams: true
                                        matchWildcards: true
                                        delay:
                                            type: fixed
                                            duration: 140000
                                        serverResponseId: ~
                                    createdAt: 2022-07-25T20:54:30.000Z
                                    updatedAt: 2022-07-25T20:54:30.000Z
                                    isPublic: false
                                    environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundMock'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        put:
            tags:
            - Mocks
            summary: Update a mock server
            description: Updates a mock server.
            operationId: updateMock
            requestBody:
                content:
                    application/json:
                        schema: {}
                        examples:
                            Update a Mock:
                                value:
                                    mock:
                                        name: Test Mock
                                        environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
                                        description: This is a test mock server.
                                        private: false
                                        versionTag: abf07d3d-f8ec-47d4-8015-9fe83078b4ec
                            Activate a Mock's Server Response:
                                value:
                                    mock:
                                        config:
                                            serverResponseId: 9a291bbe-dc0a-44ba-a3c8-6dbd06a61460
                            Deactivate a Mock's Server Response:
                                value:
                                    mock:
                                        config:
                                            serverResponseId: ''
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                mock:
                                    id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    owner: 12345678
                                    uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    mockUrl: https://e3d951bf-873f-49ac-a658-b2dcb91d3289.mock.pstmn.io
                                    name: Test Mock
                                    config:
                                        headers: []
                                        matchBody: false
                                        matchQueryParams: true
                                        matchWildcards: true
                                    createdAt: 2022-06-09T19:38:06.000Z
                                    updatedAt: 2022-06-13T18:55:25.000Z
                                    environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundMock'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        delete:
            tags:
            - Mocks
            summary: Delete a mock server
            description: Deletes a mock server.
            operationId: deleteMock
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                mock:
                                    id: e782b64e-406b-4a6c-8fe9-9ebe84aeb706
                                    uid: 12345678-e782b64e-406b-4a6c-8fe9-9ebe84aeb706
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Not Found:
                                    value:
                                        error:
                                            name: instanceNotFoundError
                                            message: JobTemplate 12345678-e782b64e-406b-4a6c-8fe9-9ebe84aeb706 does not exist
                                Parameter Missing:
                                    value:
                                        error:
                                            name: paramMissingError
                                            message: Only the name and description of a mock can be updated.
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundMock'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/mockId'
    /mocks/{mockId}/call-logs:
        get:
            tags:
            - Mocks
            summary: Get a mock server's call logs
            description: >
                Gets a mock server's call logs. You can get a maximum of 6.5MB of call logs or a total of 100 call logs, whichever limit is met first in one API call.


                Call logs contain exchanged request and response data made to mock servers. The logs provide visibility into how the mock servers are being used. You can log data to debug, test, analyze, and more, depending upon the use case.
            operationId: getMockCallLogs
            parameters:
            - name: limit
                in: '"query"'
                description: The maximum number of rows to return in the response.
                schema:
                    name: limit
                    in: '"query"'
                    description: The maximum number of rows to return in the response.
            - name: cursor
                in: '"query"'
                description: A pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
                schema:
                    name: cursor
                    in: '"query"'
                    description: A pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.
            - name: until
                in: '"query"'
                description: Return only the call logs created at and after this time, in ISO 8601 UTC format.
                schema:
                    name: until
                    in: '"query"'
                    description: Return only the call logs created at and after this time, in ISO 8601 UTC format.
            - name: since
                in: '"query"'
                description: Return only the call logs created at and before this time, in ISO 8601 UTC format.
                schema:
                    name: since
                    in: '"query"'
                    description: Return only the call logs created at and before this time, in ISO 8601 UTC format.
            - name: responseStatusCode
                in: '"query"'
                description: Return only the call logs that match the given HTTP response status code.
                schema:
                    name: responseStatusCode
                    in: '"query"'
                    description: Return only the call logs that match the given HTTP response status code.
            - name: responseType
                in: '"query"'
                description: Return only the call logs with a matching response type. For example, `success` or `error`. Matching is not case-sensitive.
                schema:
                    name: responseType
                    in: '"query"'
                    description: Return only the call logs with a matching response type. For example, `success` or `error`. Matching is not case-sensitive.
            - name: requestMethod
                in: '"query"'
                description: Return only the call logs with a matching HTTP method. Matching is not case-sensitive.
                schema:
                    name: requestMethod
                    in: '"query"'
                    description: Return only the call logs with a matching HTTP method. Matching is not case-sensitive.
            - name: requestPath
                in: '"query"'
                description: Return only the call logs that match the request's path. Matching is not case-sensitive.
                schema:
                    name: requestPath
                    in: '"query"'
                    description: Return only the call logs that match the request's path. Matching is not case-sensitive.
            - name: sort
                in: '"query"'
                description: >
                    Sort the results by the given value.


                    If you use this query parameter, you must also use the `direction` parameter.
                schema:
                    name: sort
                    in: '"query"'
                    description: >
                        Sort the results by the given value.


                        If you use this query parameter, you must also use the `direction` parameter.
            - name: direction
                in: '"query"'
                description: >
                    Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive.


                    If you use this query parameter, you must also use the `sort` parameter.
                schema:
                    name: direction
                    in: '"query"'
                    description: >
                        Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive.


                        If you use this query parameter, you must also use the `sort` parameter.
            - name: include
                in: '"query"'
                description: Include call log records with header and body data. This query parameter accepts the `request.headers`, `request.body`, `response.headers`, and `response.body` values. For multiple include types, comma-separate each value.
                schema:
                    name: include
                    in: '"query"'
                    description: Include call log records with header and body data. This query parameter accepts the `request.headers`, `request.body`, `response.headers`, and `response.body` values. For multiple include types, comma-separate each value.
                examples:
                    One Include Value:
                        value: request.body
                    Multiple Include Values:
                        value: request.headers,request.body,response.headers,response.body
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Successful Response:
                                    value:
                                        call-logs:
                                        - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                                            responseName: Double check your method and the request path and try again.
                                            servedAt: 2022-01-17T06:19:30.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: error
                                                statusCode: 404
                                        - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                                            responseName: Bad request
                                            servedAt: 2022-01-17T06:19:22.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 400
                                        - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                                            responseName: Successful addition of animals to the store
                                            servedAt: 2022-01-17T06:19:16.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                                            responseName: Get filtered list of Animals
                                            servedAt: 2022-01-17T06:18:26.000Z
                                            request:
                                                method: GET
                                                path: /animals?type=dog
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                                            responseName: Get Animals
                                            servedAt: 2022-01-17T06:18:06.000Z
                                            request:
                                                method: GET
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        meta:
                                            nextCursor: ''
                                Filter by Limit:
                                    value:
                                        call-logs:
                                        - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                                            responseName: Double check your method and the request path and try again.
                                            servedAt: 2022-01-17T06:19:30.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: error
                                                statusCode: 404
                                        - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                                            responseName: Bad request
                                            servedAt: 2022-01-17T06:19:22.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 400
                                        meta:
                                            nextCursor: eyJzY2hlbWUiOiJjdXJzb3JfcGFnaW5hdGlvbklkIiwiZGlyZWN0aW9uVHlwZSI6Im5leHQiLCJwaXZvdCI6InBhZ2luYXRpb25JZCIsInZhbHVlIjoxNjQyNDAwMzU2MDAwNTc5fQ==
                                Filter by Cursor:
                                    value:
                                        call-logs:
                                        - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                                            responseName: Successful addition of animals to the store
                                            servedAt: 2022-01-17T06:19:16.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                                            responseName: Get filtered list of Animals
                                            servedAt: 2022-01-17T06:18:26.000Z
                                            request:
                                                method: GET
                                                path: /animals?type=dog
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                                            responseName: Get Animals
                                            servedAt: 2022-01-17T06:18:06.000Z
                                            request:
                                                method: GET
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        meta:
                                            nextCursor: ''
                                Filter by Date Range:
                                    value:
                                        call-logs:
                                        - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                                            responseName: Double check your method and the request path and try again.
                                            servedAt: 2022-01-17T06:19:30.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: error
                                                statusCode: 404
                                        - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                                            responseName: Bad request
                                            servedAt: 2022-01-17T06:19:22.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 400
                                        - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                                            responseName: Successful addition of animals to the store
                                            servedAt: 2022-01-17T06:19:16.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                                            responseName: Get filtered list of Animals
                                            servedAt: 2022-01-17T06:18:26.000Z
                                            request:
                                                method: GET
                                                path: /animals?type=dog
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                                            responseName: Get Animals
                                            servedAt: 2022-01-17T06:18:06.000Z
                                            request:
                                                method: GET
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        meta:
                                            nextCursor: ''
                                Filter by Date Since:
                                    value:
                                        call-logs:
                                        - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                                            responseName: Double check your method and the request path and try again.
                                            servedAt: 2022-01-17T06:19:30.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: error
                                                statusCode: 404
                                        - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                                            responseName: Bad request
                                            servedAt: 2022-01-17T06:19:22.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 400
                                        - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                                            responseName: Successful addition of animals to the store
                                            servedAt: 2022-01-17T06:19:16.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        meta:
                                            nextCursor: ''
                                Filter by responseStatusCode:
                                    value:
                                        call-logs:
                                        - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                                            responseName: Successful addition of animals to the store
                                            servedAt: 2022-01-17T06:19:16.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                                            responseName: Get filtered list of Animals
                                            servedAt: 2022-01-17T06:18:26.000Z
                                            request:
                                                method: GET
                                                path: /animals?type=dog
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                                            responseName: Get Animals
                                            servedAt: 2022-01-17T06:18:06.000Z
                                            request:
                                                method: GET
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        meta:
                                            nextCursor: ''
                                Filter by responseType:
                                    value:
                                        call-logs:
                                        - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                                            responseName: Bad request
                                            servedAt: 2022-01-17T06:19:22.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 400
                                        - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                                            responseName: Successful addition of animals to the store
                                            servedAt: 2022-01-17T06:19:16.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                                            responseName: Get filtered list of Animals
                                            servedAt: 2022-01-17T06:18:26.000Z
                                            request:
                                                method: GET
                                                path: /animals?type=dog
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                                            responseName: Get Animals
                                            servedAt: 2022-01-17T06:18:06.000Z
                                            request:
                                                method: GET
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        meta:
                                            nextCursor: ''
                                Filter by requestMethod:
                                    value:
                                        call-logs:
                                        - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                                            responseName: Double check your method and the request path and try again.
                                            servedAt: 2022-01-17T06:19:30.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: error
                                                statusCode: 404
                                        - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                                            responseName: Bad request
                                            servedAt: 2022-01-17T06:19:22.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 400
                                        - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                                            responseName: Successful addition of animals to the store
                                            servedAt: 2022-01-17T06:19:16.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        meta:
                                            nextCursor: ''
                                Filter by requestPath:
                                    value:
                                        call-logs:
                                        - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                                            responseName: Get filtered list of Animals
                                            servedAt: 2022-01-17T06:18:26.000Z
                                            request:
                                                method: GET
                                                path: /animals?type=dog
                                            response:
                                                type: success
                                                statusCode: 200
                                        meta:
                                            nextCursor: ''
                                Sort by servedAt:
                                    value:
                                        call-logs:
                                        - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                                            responseName: Get Animals
                                            servedAt: 2022-01-17T06:18:06.000Z
                                            request:
                                                method: GET
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                                            responseName: Get filtered list of Animals
                                            servedAt: 2022-01-17T06:18:26.000Z
                                            request:
                                                method: GET
                                                path: /animals?type=dog
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                                            responseName: Successful addition of animals to the store
                                            servedAt: 2022-01-17T06:19:16.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 200
                                        - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                                            responseName: Bad request
                                            servedAt: 2022-01-17T06:19:22.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: success
                                                statusCode: 400
                                        - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                                            responseName: Double check your method and the request path and try again.
                                            servedAt: 2022-01-17T06:19:30.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                            response:
                                                type: error
                                                statusCode: 404
                                        meta:
                                            nextCursor: ''
                                Filter by Header and Body Data:
                                    value:
                                        call-logs:
                                        - id: c4505a1e-7261-497c-91ff-db4bd51351a6-9545
                                            responseName: Double check your method and the request path and try again.
                                            servedAt: 2022-01-17T06:19:30.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                                headers:
                                                - key: content-length
                                                    value: 50
                                                - key: x-mock-match-request-body
                                                    value: true
                                                - key: content-type
                                                    value: application/json
                                                body:
                                                    mode: raw
                                                    data: '{"type":"hamster","breed":"Syrian Hamster"}'
                                            response:
                                                type: error
                                                statusCode: 404
                                                headers: []
                                                body:
                                                    data: '{"error":{"name":"mockRequestNotFoundError","message":"Double check your method and the request path and try again."}}'
                                        - id: 0f63f54d-665e-436a-95b4-c1302d7685a9-3925
                                            responseName: Bad request
                                            servedAt: 2022-01-17T06:19:22.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                                headers:
                                                - key: content-length
                                                    value: 69
                                                - key: x-mock-match-request-body
                                                    value: true
                                                - key: content-type
                                                    value: application/json
                                                body:
                                                    mode: raw
                                                    data: '{"type":"hamster","breed":"Syrian Hamster","age":"1 month"}'
                                            response:
                                                type: success
                                                statusCode: 400
                                                headers:
                                                - description:
                                                        content: ''
                                                        type: text/plain
                                                    key: Content-Type
                                                    value: application/json
                                                body:
                                                    data: >-
                                                        {
                                                            "message": "Malformed request. You need to send gender as part of the request."
                                                        }
                                        - id: adab0d30-5c38-43bf-af90-4119925138e2-3795
                                            responseName: Successful addition of animals to the store
                                            servedAt: 2022-01-17T06:19:16.000Z
                                            request:
                                                method: POST
                                                path: /animals
                                                headers:
                                                - key: content-length
                                                    value: 88
                                                - key: x-mock-match-request-body
                                                    value: true
                                                - key: content-type
                                                    value: application/json
                                                body:
                                                    mode: raw
                                                    data: '{"type":"hamster","breed":"Syrian Hamster","age":"1 month","gender":"male"}'
                                            response:
                                                type: success
                                                statusCode: 200
                                                headers:
                                                - description:
                                                        content: ''
                                                        type: text/plain
                                                    key: Content-Type
                                                    value: application/json
                                                body:
                                                    data: >-
                                                        {
                                                            "message": "Animal added successfully to the store"
                                                        }
                                        - id: dae50669-f4c1-460a-b3a4-3a2445f4f39d-2468
                                            responseName: Get filtered list of Animals
                                            servedAt: 2022-01-17T06:18:26.000Z
                                            request:
                                                method: GET
                                                path: /animals?type=dog
                                                headers: []
                                                body: {}
                                            response:
                                                type: success
                                                statusCode: 200
                                                headers:
                                                - description:
                                                        content: ''
                                                        type: text/plain
                                                    key: Content-Type
                                                    value: application/json
                                                body:
                                                    data: >-
                                                        [
                                                            {
                                                                "type": "dog",
                                                                "breed": "German Sheperd",
                                                                "age": "6 months",
                                                                "gender": "male"
                                                            },
                                                            {
                                                                "type": "dog",
                                                                "breed": "Bulldog",
                                                                "age": "1 year",
                                                                "gender": "female"
                                                            }
                                                        ]
                                        - id: a5330463-26e1-4812-a962-e44b569a2054-9894
                                            responseName: Get Animals
                                            servedAt: 2022-01-17T06:18:06.000Z
                                            request:
                                                method: GET
                                                path: /animals
                                                headers: []
                                                body: {}
                                            response:
                                                type: success
                                                statusCode: 200
                                                headers:
                                                - description:
                                                        content: ''
                                                        type: text/plain
                                                    key: Content-Type
                                                    value: application/json
                                                body:
                                                    data: >-
                                                        [
                                                            {
                                                                "type": "dog",
                                                                "breed": "German Sheperd",
                                                                "age": "6 months",
                                                                "gender": "male"
                                                            },
                                                            {
                                                                "type": "dog",
                                                                "breed": "Bulldog",
                                                                "age": "1 year",
                                                                "gender": "female"
                                                            },
                                                            {
                                                                "type": "cat",
                                                                "breed": "Persian cat",
                                                                "age": "3 months",
                                                                "gender": "female"
                                                            }
                                                        ]
                                        meta:
                                            nextCursor: ''
                400:
                    $ref: '#/components/responses/serverResponseNotFoundError'
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundMock'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/mockId'
    /mocks/{mockId}/publish:
        post:
            tags:
            - Mocks
            summary: Publish a mock server
            description: Publishes a mock server. Publishing a mock server sets its **Access Control** configuration setting to public.
            operationId: publishMock
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                mock:
                                    id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: mockAlreadyPublishedError
                                    message: This mock is already public.
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundMock'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/mockId'
    /mocks/{mockId}/unpublish:
        delete:
            tags:
            - Mocks
            summary: Unpublish a mock server
            description: Unpublishes a mock server. Unpublishing a mock server sets its **Access Control** configuration setting to private.
            operationId: unpublishMock
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                mock:
                                    id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: mockAlreadyUnpublishedError
                                    message: This mock has already been deleted.
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundMock'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/mockId'
    /mocks/{mockId}/server-responses:
        get:
            tags:
            - Mocks
            summary: Get all server responses
            description: Gets all of a mock server's server responses.
            operationId: getMockServerResponses
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                            - id: 965cdd16-fe22-4d96-a161-3d05490ac421
                                name: Internal Server Error
                                statusCode: 500
                                createdAt: 2022-08-02T14:57:44.000Z
                                updatedAt: 2022-08-02T14:57:44.000Z
                                createdBy: 12345678
                                updatedBy: 12345678
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundMock'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        post:
            tags:
            - Mocks
            summary: Create a server response
            description: >
                Creates a server response. Server responses let you simulate 5xx server-level responses, such as 500 or 503.


                Server-level responses are agnostic to application-level logic. Server responses let you simulate this behavior on a mock server. You do not need to define each error for all exposed paths on the mock server.


                If you set a server response as active, then all the calls to the mock server return with that active server response.


                **Note:**


                You can create multiple server responses for a mock server, but only one mock server can be set as active.
            operationId: createServerResponse
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            serverResponse:
                                name: Internal Server Error
                                statusCode: 500
                                header:
                                - key: Content-Type
                                    value: application/json
                                language: json
                                body: >-
                                    {
                                            "message": "Something went wrong; try again later."
                                    }
                required: true
            responses:
                200:
                    $ref: '#/components/responses/mockServerResponse'
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Parameter Missing:
                                    value:
                                        error:
                                            name: paramMissingError
                                            message: Parameter is missing in the request.
                                            details:
                                                param:
                                                - statusCode
                                Invalid Parameter:
                                    value:
                                        error:
                                            name: invalidParamsError
                                            message: 'Invalid value for parameter: language. You must pass a valid language.'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/mockId'
    /mocks/{mockId}/server-responses/{serverResponseId}:
        get:
            tags:
            - Mocks
            summary: Get a server response
            description: Gets information about a server response.
            operationId: getMockServerResponse
            parameters:
            - $ref: '#/components/parameters/mockId'
            - $ref: '#/components/parameters/serverResponseId'
            responses:
                200:
                    $ref: '#/components/responses/mockServerResponse'
                400:
                    $ref: '#/components/responses/serverResponseNotFoundError'
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundMock'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        put:
            tags:
            - Mocks
            summary: Update a server response
            description: Updates a server response.
            operationId: updateServerResponse
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            serverResponse:
                                name: Internal Server Error
                                statusCode: 500
                                headers:
                                - key: Content-Type
                                    value: application/json
                                language: json
                                body: >-
                                    {
                                            "message": "Something went wrong; try again later."
                                    }
                required: true
            responses:
                200:
                    $ref: '#/components/responses/mockServerResponse'
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Parameter Missing:
                                    value:
                                        error:
                                            name: paramMissingError
                                            message: Parameter is missing in the request.
                                            details:
                                                param:
                                                - serverResponse
                                Invalid Parameter:
                                    value:
                                        error:
                                            name: invalidParamsError
                                            message: 'Invalid value for parameter: language. You must pass a valid language.'
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        delete:
            tags:
            - Mocks
            summary: Delete a server response
            description: Deletes a mock server's server response.
            operationId: deleteMockServerResponse
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                id: 965cdd16-fe22-4d96-a161-3d05490ac421
                                name: Internal Server Error
                                statusCode: 500
                                headers: []
                                language: json
                                body: >-
                                    {
                                            "message": "Something went wrong; try again later."
                                    }
                                createdBy: 20891195
                                updatedBy: 20891195
                                createdAt: 2022-09-21T20:20:09.000Z
                400:
                    $ref: '#/components/responses/serverResponseNotFoundError'
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundMock'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/mockId'
        - $ref: '#/components/parameters/serverResponseId'
    /monitors:
        get:
            tags:
            - Monitors
            summary: Get all monitors
            description: Gets all monitors.
            operationId: allMonitors
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                monitors:
                                - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    name: Test Monitor
                                    uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    owner: 12345678
                                - id: 1e6b6cb7-f13d-4000-acb7-0695757174a8
                                    name: Postman Echo Monitor
                                    uid: 87654321-1e6b6cb7-f13d-4000-acb7-0695757174a8
                                    owner: 87654321
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        post:
            tags:
            - Monitors
            summary: Create a monitor
            description: >
                **In Postman v10 and higher you cannot create monitors for collections added to an API definition.**


                Creates a monitor.
            operationId: createMonitor
            parameters:
            - $ref: '#/components/parameters/workspaceQueryId'
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            monitor:
                                name: Test Monitor
                                schedule:
                                    cron: 0 0 * * *
                                    timezone: America/Chicago
                                collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                environment: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                monitor:
                                    id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    name: Test Monitor
                                    uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Missing Parameter:
                                    value:
                                        error:
                                            error:
                                                name: paramMissingError
                                                message: Parameter is missing in the request.
                                                details:
                                                    param:
                                                    - name
                                Invalid Timezone:
                                    value:
                                        error:
                                            name: invalidParamsError
                                            message: The request had invalid parameters
                                            details:
                                                param: schedule.timezone
                                Invalid Environment UID:
                                    value:
                                        error:
                                            name: invalidUidError
                                            message: The specified uid is invalid.
                                            details:
                                                param: environment
                                                uid: 5daabc50-8451-43f6-922d-96b403b4f28e
                                Invalid Cron Pattern:
                                    value:
                                        error:
                                            name: cronPatternNotAllowedError
                                            message: The specified cron pattern is not allowed. Please check https://monitor.getpostman.com for the allowed schedules.
                                            details:
                                                pattern: '* * * * *'
                401:
                    $ref: '#/components/responses/unauthorized'
                403:
                    description: Forbidden
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: forbiddenError
                                    message: You need read access to this collection in order to perform this action.
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /monitors/{monitorId}:
        get:
            tags:
            - Monitors
            summary: Get a monitor
            description: Gets information about a monitor.
            operationId: singleMonitor
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                monitor:
                                    id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    name: Test Monitor
                                    uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    owner: 12345678
                                    collectionUid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    environmentUid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                    options:
                                        strictSSL: true
                                        followRedirects: true
                                        requestTimeout: 3000
                                        requestDelay: 0
                                    notifications:
                                        onError:
                                        - email: taylor.lee@example.com
                                        onFailure:
                                        - email: taylor.lee@example.com
                                    distribution: []
                                    schedule:
                                        cron: 0 0 0 * * *
                                        timezone: America/Chicago
                                        nextRun: 2022-06-18T05:00:00.000Z
                                    lastRun:
                                        status: failed
                                        startedAt: 2022-06-17T18:39:52.852Z
                                        finishedAt: 2022-06-17T18:39:53.707Z
                                        stats:
                                            assertions:
                                                total: 8
                                                failed: 1
                                            requests:
                                                total: 4
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundMonitor'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        put:
            tags:
            - Monitors
            summary: Update a monitor
            description: Updates a monitor.
            operationId: updateMonitor
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            monitor:
                                name: Test Monitor
                                schedule:
                                    cron: '*/5 * * * *'
                                    timezone: America/Chicago
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                monitor:
                                    id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    name: Test Monitor
                                    uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundMonitor'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        delete:
            tags:
            - Monitors
            summary: Delete a monitor
            description: Deletes a monitor.
            operationId: deleteMonitor
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                monitor:
                                    id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: instanceNotFoundError
                                    message: JobTemplate 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1 does not exist
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/monitorId'
    /monitors/{monitorId}/run:
        post:
            tags:
            - Monitors
            summary: Run a monitor
            description: Runs a monitor and returns its run results.
            operationId: runAMonitor
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Successful Response:
                                    value:
                                        run:
                                            info:
                                                jobId: 1ecee76a-e14e-47c0-bddc-256bf690c407
                                                monitorId: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                                name: Test Monitor
                                                collectionUid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                                environmentUid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                                status: success
                                                startedAt: 2022-06-17T19:50:04.019Z
                                                finishedAt: 2022-06-17T19:50:06.439Z
                                            stats:
                                                assertions:
                                                    total: 0
                                                    failed: 0
                                                requests:
                                                    total: 1
                                                    failed: 0
                                            executions:
                                            - id: 1
                                                item:
                                                    name: Sample POST Request
                                                request:
                                                    method: POST
                                                    url: http://echo.getpostman.com/post
                                                    headers:
                                                        Content-Type: application/json
                                                        User-Agent: PostmanRuntime/7.29.0
                                                        Accept: '*/*'
                                                        Cache-Control: no-cache
                                                        Postman-Token: ''
                                                        Host: echo.getpostman.com
                                                        Accept-Encoding: gzip, deflate, br
                                                        Connection: keep-alive
                                                        Content-Length: 0
                                                    body:
                                                        contentLength: 0
                                                    timestamp: 2022-06-17T19:50:06.186Z
                                                response:
                                                    code: 200
                                                    body:
                                                        contentLength: 50
                                                    responseTime: 49
                                                    responseSize: 50
                                                    headers:
                                                        Date: Fri, 17 Jun 2022 19:50:06 GMT
                                                        Content-Type: text/plain
                                                        Content-Length: 50
                                                        Connection: keep-alive
                                                        Server: ''
                                            failures: []
                                Monitor Run Failed:
                                    value:
                                        run:
                                            info:
                                                jobId: 1ecee76a-e14e-47c0-bddc-256bf690c407
                                                monitorId: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                                name: Test Monitor
                                                collectionUid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                                environmentUid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                                status: failed
                                                startedAt: 2022-06-17T20:00:41.659Z
                                                finishedAt: 2022-06-17T20:00:42.693Z
                                            stats:
                                                assertions:
                                                    total: 1
                                                    failed: 1
                                                requests:
                                                    total: 1
                                                    failed: 0
                                            executions:
                                            - id: 1
                                                item:
                                                    name: Sample POST Request
                                                request:
                                                    method: POST
                                                    url: http://echo.getpostman.com/post
                                                    headers:
                                                        Content-Type: application/json
                                                        User-Agent: PostmanRuntime/7.29.0
                                                        Accept: '*/*'
                                                        Cache-Control: no-cache
                                                        Postman-Token: ''
                                                        Host: echo.getpostman.com
                                                        Accept-Encoding: gzip, deflate, br
                                                        Connection: keep-alive
                                                        Content-Length: 0
                                                    body:
                                                        contentLength: 0
                                                    timestamp: 2022-06-17T20:00:42.423Z
                                                response:
                                                    code: 200
                                                    body:
                                                        contentLength: 50
                                                    responseTime: 15
                                                    responseSize: 50
                                                    headers:
                                                        Date: Fri, 17 Jun 2022 20:00:42 GMT
                                                        Content-Type: text/plain
                                                        Content-Length: 50
                                                        Connection: keep-alive
                                                        Server: ''
                                            failures: []
                                Monitor Run with Errors:
                                    value:
                                        run:
                                            info:
                                                jobId: 1ecee76a-e14e-47c0-bddc-256bf690c407
                                                monitorId: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                                name: Test Monitor
                                                collectionUid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                                environmentUid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                                status: error
                                                startedAt: 2022-06-17T20:04:47.183Z
                                                finishedAt: 2022-06-17T20:04:48.858Z
                                            stats:
                                                assertions:
                                                    total: 4
                                                    failed: 2
                                                requests:
                                                    total: 4
                                                    failed: 3
                                            executions:
                                            - id: 1
                                                item:
                                                    name: Sample GET Request
                                                request:
                                                    method: GET
                                                    url: https://example.com/search?format=json&state=&city=&country=
                                                    headers:
                                                        User-Agent: PostmanRuntime/7.29.0
                                                        Accept: '*/*'
                                                        Cache-Control: no-cache
                                                        Postman-Token: ''
                                                        Host: example.com
                                                        Accept-Encoding: gzip, deflate, br
                                                        Connection: keep-alive
                                                    body:
                                                        contentLength: 0
                                                    timestamp: 2022-06-17T20:04:47.926Z
                                                response:
                                                    code: 200
                                                    body:
                                                        contentLength: 2
                                                    responseTime: 257
                                                    responseSize: 2
                                                    headers:
                                                        Server: ''
                                                        Date: Fri, 17 Jun 2022 20:04:47 GMT
                                                        Content-Type: application/json; charset=UTF-8
                                                        Transfer-Encoding: chunked
                                                        Connection: keep-alive
                                                        Keep-Alive: ''
                                                        Access-Control-Allow-Origin: '*'
                                                        Access-Control-Allow-Methods: OPTIONS,GET
                                                errors:
                                                - name: TypeError
                                                    message: Cannot read property 'lat' of undefined
                                            failures:
                                            - executionId: 1
                                                name: TypeError
                                                message: Cannot read property 'lat' of undefined
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/monitorId'
    /network/private:
        get:
            tags:
            - Private API Network
            summary: Get all elements and folders
            description: >-
                Gets information about the folders and their elements added to your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).


                **Note:**


                The `limit` and `offset` parameters are separately applied to elements and folders. For example, if you query a `limit` value of `10` and an `offset` value `0`, the endpoint returns 10 elements and 10 folders for a total of 20 items. The `totalCount` property in the `meta` response is the total count of **both** elements and folders.
            operationId: getAllElementsAndFolders
            parameters:
            - name: since
                in: '"query"'
                description: Return only elements updated at and after this time, in ISO 8601 UTC format.
                schema:
                    name: since
                    in: '"query"'
                    description: Return only elements updated at and after this time, in ISO 8601 UTC format.
            - name: until
                in: '"query"'
                description: Return only elements updated at and before this time, in ISO 8601 UTC format.
                schema:
                    name: until
                    in: '"query"'
                    description: Return only elements updated at and before this time, in ISO 8601 UTC format.
            - name: addedBy
                in: '"query"'
                description: Return only elements published by the given user ID.
                schema:
                    name: addedBy
                    in: '"query"'
                    description: Return only elements published by the given user ID.
            - name: name
                in: '"query"'
                description: Return only elements whose name includes the given value. Matching is not case-sensitive.
                schema:
                    name: name
                    in: '"query"'
                    description: Return only elements whose name includes the given value. Matching is not case-sensitive.
            - name: summary
                in: '"query"'
                description: Return only elements whose summary includes the given value. Matching is not case-sensitive.
                schema:
                    name: summary
                    in: '"query"'
                    description: Return only elements whose summary includes the given value. Matching is not case-sensitive.
            - name: description
                in: '"query"'
                description: Return only elements whose description includes the given value. Matching is not case-sensitive.
                schema:
                    name: description
                    in: '"query"'
                    description: Return only elements whose description includes the given value. Matching is not case-sensitive.
            - name: sort
                in: '"query"'
                description: Sort the results by the given value. If you use this query parameter, you must also use the `direction` parameter.
                schema:
                    name: sort
                    in: '"query"'
                    description: Sort the results by the given value. If you use this query parameter, you must also use the `direction` parameter.
            - name: direction
                in: '"query"'
                description: Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive. If you use this query parameter, you must also use the `sort` parameter.
                schema:
                    name: direction
                    in: '"query"'
                    description: Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive. If you use this query parameter, you must also use the `sort` parameter.
            - name: createdBy
                in: '"query"'
                description: Return only the elements created by the given user ID.
                schema:
                    name: createdBy
                    in: '"query"'
                    description: Return only the elements created by the given user ID.
            - name: offset
                in: '"query"'
                description: The zero-based offset of the first item to return.
                schema:
                    name: offset
                    in: '"query"'
                    description: The zero-based offset of the first item to return.
            - name: limit
                in: '"query"'
                description: The maximum number of elements to return. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.
                schema:
                    name: limit
                    in: '"query"'
                    description: The maximum number of elements to return. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.
            - name: parentFolderId
                in: '"query"'
                description: Return the folders and elements in a specific folder. If this value is `0`, then the endpoint only returns the root folder's elements.
                schema:
                    name: parentFolderId
                    in: '"query"'
                    description: Return the folders and elements in a specific folder. If this value is `0`, then the endpoint only returns the root folder's elements.
            - name: type
                in: '"query"'
                description: Filter by the element type.
                schema:
                    name: type
                    in: '"query"'
                    description: Filter by the element type.
            responses:
                200:
                    $ref: '#/components/responses/getPANElementsAndFolders'
                401:
                    $ref: '#/components/responses/unauthorized'
                403:
                    $ref: '#/components/responses/forbiddenError'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        post:
            tags:
            - Private API Network
            summary: Add an element or folder
            description: Publishes a element or creates a folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). An element is a Postman API, collection, or workspace.
            operationId: postElementOrFolder
            requestBody:
                $ref: '#/components/requestBodies/postPANElementOrFolder'
            responses:
                201:
                    $ref: '#/components/responses/postPANElementOrFolder'
                401:
                    $ref: '#/components/responses/unauthorized'
                403:
                    $ref: '#/components/responses/forbiddenError'
                404:
                    $ref: '#/components/responses/instanceNotFoundElementFolder'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /network/private/{elementType}/{elementId}:
        put:
            tags:
            - Private API Network
            summary: Update an element or folder
            description: Updates an element or folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
            operationId: putElementOrFolder
            requestBody:
                $ref: '#/components/requestBodies/putPANElementOrFolder'
            responses:
                200:
                    $ref: '#/components/responses/putPANElementOrFolder'
                401:
                    $ref: '#/components/responses/unauthorized'
                403:
                    $ref: '#/components/responses/forbiddenError'
                404:
                    $ref: '#/components/responses/instanceNotFoundElementFolder'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        delete:
            tags:
            - Private API Network
            summary: Remove an element or folder
            description: >-
                Removes an element or delete a folder from your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).


                **Note:**


                Removing an API, collection, or workspace element does **not** delete it. It only removes it from the Private API Network folder.
            operationId: removeElementOrFolder
            responses:
                200:
                    $ref: '#/components/responses/removePANElementOrFolder'
                400:
                    $ref: '#/components/responses/folderNotEmptyError'
                401:
                    $ref: '#/components/responses/unauthorized'
                403:
                    $ref: '#/components/responses/forbiddenError'
                404:
                    $ref: '#/components/responses/instanceNotFoundElementFolder'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/elementId'
        - $ref: '#/components/parameters/elementType'
    /network/private/network-entity/request/all:
        get:
            tags:
            - Private API Network
            summary: Get all element add requests
            description: Gets a list requests to add elements to the [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
            operationId: getAllAddElementRequests
            parameters:
            - name: since
                in: '"query"'
                description: Return only requests updated at and after this time, in ISO 8601 UTC format.
                required: false
                schema:
                    name: since
                    in: '"query"'
                    description: Return only requests updated at and after this time, in ISO 8601 UTC format.
                    required: false
            - name: until
                in: '"query"'
                description: Return only request updated at and before this time, in ISO 8601 UTC format.
                required: false
                schema:
                    name: until
                    in: '"query"'
                    description: Return only request updated at and before this time, in ISO 8601 UTC format.
                    required: false
            - name: requestedBy
                in: '"query"'
                description: Return a user's element requests by their user ID.
                required: false
                schema:
                    name: requestedBy
                    in: '"query"'
                    description: Return a user's element requests by their user ID.
                    required: false
            - name: type
                in: '"query"'
                description: Filter by the element type.
                required: false
                schema:
                    name: type
                    in: '"query"'
                    description: Filter by the element type.
                    required: false
            - name: status
                in: '"query"'
                description: Filter by the request status.
                required: false
                schema:
                    name: status
                    in: '"query"'
                    description: Filter by the request status.
                    required: false
            - name: name
                in: '"query"'
                description: Return only elements whose name includes the given value. Matching is not case-sensitive.
                required: false
                schema:
                    name: name
                    in: '"query"'
                    description: Return only elements whose name includes the given value. Matching is not case-sensitive.
                    required: false
            - name: sort
                in: '"query"'
                description: Sort the results by the given value. If you use this query parameter, you must also use the `direction` parameter.
                schema:
                    name: sort
                    in: '"query"'
                    description: Sort the results by the given value. If you use this query parameter, you must also use the `direction` parameter.
            - name: direction
                in: '"query"'
                description: Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive. If you use this query parameter, you must also use the `sort` parameter.
                schema:
                    name: direction
                    in: '"query"'
                    description: Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive. If you use this query parameter, you must also use the `sort` parameter.
            - name: offset
                in: '"query"'
                description: The zero-based offset of the first item to return.
                schema:
                    name: offset
                    in: '"query"'
                    description: The zero-based offset of the first item to return.
            - name: limit
                in: '"query"'
                description: The maximum number of elements to return. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.
                schema:
                    name: limit
                    in: '"query"'
                    description: The maximum number of elements to return. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.
            responses:
                200:
                    $ref: '#/components/responses/getAllPANAddElementRequests'
                400:
                    $ref: '#/components/responses/invalidQueryParamsInGetAllElementRequests'
                401:
                    $ref: '#/components/responses/unauthorized'
                403:
                    $ref: '#/components/responses/forbiddenError'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /network/private/network-entity/request/{requestId}:
        put:
            tags:
            - Private API Network
            summary: Respond to an element add request
            description: Responds to a request to add an element to the [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). Only managers can approve or deny a request. Once approved, the element will appear in the team's Private API Network.
            operationId: respondElementAddRequest
            parameters:
            - $ref: '#/components/parameters/requestId'
            requestBody:
                $ref: '#/components/requestBodies/respondPANElementAddRequest'
            responses:
                200:
                    $ref: '#/components/responses/respondPANElementAddRequest'
                400:
                    $ref: '#/components/responses/invalidNetworkElementRequest'
                401:
                    $ref: '#/components/responses/unauthorized'
                403:
                    $ref: '#/components/responses/forbiddenError'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /scim/v2/Groups:
        get:
            tags:
            - SCIM 2.0 - Identity
            - Group Provisioning
            summary: Get all group resources
            description: Gets information about all Postman team members.
            operationId: fetchAllGroupResources
            parameters:
            - name: startIndex
                in: '"query"'
                schema:
                    name: startIndex
                    in: '"query"'
            - name: count
                in: '"query"'
                schema:
                    name: count
                    in: '"query"'
            - name: filter
                in: '"query"'
                schema:
                    name: filter
                    in: '"query"'
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Successful Response:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:ListResponse
                                        totalResults: 2
                                        startIndex: 1
                                        itemsPerPage: 2
                                        Resources:
                                        - schemas:
                                            - urn:ietf:params:scim:schemas:core:2.0:Group
                                            id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                                            displayName: Test-API
                                            members:
                                            - value: 23a35c2723d34c03b4c56443c09e7173
                                                display: taylor.lee@example.com
                                            externalId: 1234
                                            meta:
                                                resourceType: Group
                                                created: 2022-02-22T04:24:13.000Z
                                                lastModified: 2022-02-22T04:24:13.000Z
                                        - schemas:
                                            - urn:ietf:params:scim:schemas:core:2.0:Group
                                            id: 123775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                                            displayName: Test Group
                                            members:
                                            - value: 23a35c2723d34c03b4c56443c09e7173
                                                display: taylor.lee@example.com
                                            - value: ghc794f24f4c49f4b5d503a4cb2686e90
                                                display: alex.cruz@example.com
                                            externalId: 4321
                                            meta:
                                                resourceType: Group
                                                created: 2022-02-22T04:24:13.000Z
                                                lastModified: 2022-02-22T04:24:13.000Z
                                No Results Found:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:ListResponse
                                        totalResults: 0
                                        startIndex: 1
                                        itemsPerPage: 0
                                        Resources: []
                                Filter Results:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:ListResponse
                                        totalResults: 1
                                        startIndex: 1
                                        itemsPerPage: 1
                                        Resources:
                                        - schemas:
                                            - urn:ietf:params:scim:schemas:core:2.0:Group
                                            id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                                            displayName: Test-API
                                            members:
                                            - value: b1c794f24f4c49f4b5d503a4cb2686ea
                                                display: taylor.lee@example.com
                                            externalId: 1234
                                            meta:
                                                resourceType: Group
                                                created: 2022-02-22T04:24:13.000Z
                                                lastModified: 2022-02-22T04:24:13.000Z
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Invalid Team:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: This Postman team doesn't exist anymore.
                                        status: 400
                                Invalid Filter:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: You've used filter(s) that Postman doesn't support.
                                        status: 400
                401:
                    $ref: '#/components/responses/scimUnauthorized'
                403:
                    $ref: '#/components/responses/scimForbidden'
                429:
                    $ref: '#/components/responses/scimTooManyRequests'
                500:
                    $ref: '#/components/responses/scimInternalErrorGroup'
        post:
            tags:
            - SCIM 2.0 - Identity
            - Group Provisioning
            summary: Create a group
            description: >
                Creates a new user group in Postman and creates a new account for each group member.


                Each account is added to your Postman team and authentication is activated for each user. If an existing Postman account uses an email that matches a group member's email ID, an [email invite](https://postman.postman.co/docs/administration/managing-your-team/managing-your-team/#invites) to join your Postman team is sent to that user. Once the user accepts the invite, they'll be added to your team.


                By default, the system assigns new users the developer role. You can [update user roles in Postman](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#managing-team-roles).
            operationId: createGroup
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:User
                            userName: taylor.lee@example.com
                            name:
                                givenName: Taylor
                                familyName: Lee
                            displayName: Taylor Lee
                            locale: en-US
                            groups:
                            - Test Group
                            active: true
            responses:
                201:
                    description: Created
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Group Created:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:schemas:core:2.0:Group
                                        id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                                        displayName: Test-API
                                        members: []
                                        externalId: 1234
                                        meta:
                                            resourceType: Group
                                            created: 2022-02-22T04:24:13.000Z
                                            lastModified: 2022-02-22T04:24:13.000Z
                                Group Created with Members:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:schemas:core:2.0:Group
                                        id: 561631fq14ed41872a8eea4c8aa2b38cda9749812cc55c00
                                        displayName: Test-API
                                        members:
                                        - value: b1c794f24f4c49f4b5d503a4cb2686ea
                                            display: taylor.lee@example.com
                                        externalId: 1234
                                        meta:
                                            resourceType: Group
                                            created: 2022-02-22T04:24:13.000Z
                                            lastModified: 2022-02-22T04:24:13.000Z
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Invalid Syntax:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        scimType: invalidSyntax
                                        detail: The request body seems to be incomplete or have unsupported characters.
                                        status: 400
                                Invalid Team:
                                    value:
                                        detail: This Postman team doesn't exist anymore.
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        status: 400
                                Not Enterprise:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: Only Postman teams on the Enterprise plan can use SCIM provisioning. Upgrade your plan.
                                        status: 400
                                No Slots Available:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: No slots available on your Postman team. Purchase or free up slots to invite more members. For help, contact Team Admins or members with a Billing role.
                                        status: 400
                401:
                    $ref: '#/components/responses/scimUnauthorized'
                403:
                    $ref: '#/components/responses/scimForbidden'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema: {}
                            example:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                scimType: uniqueness
                                detail: This person is already a member of the team.
                                status: 409
                429:
                    $ref: '#/components/responses/scimTooManyRequests'
                500:
                    $ref: '#/components/responses/scimInternalErrorGroupUpdate'
    /scim/v2/Groups/{groupId}:
        get:
            tags:
            - SCIM 2.0 - Identity
            - Group Provisioning
            summary: Get a group resource
            description: Gets information about a Postman group within the team.
            operationId: fetchGroupResource
            responses:
                200:
                    $ref: '#/components/responses/scimGroupResource'
                400:
                    $ref: '#/components/responses/scimBadRequest'
                401:
                    $ref: '#/components/responses/scimUnauthorized'
                403:
                    description: Forbidden
                    content:
                        application/json:
                            schema: {}
                            example:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.
                                status: 403
                404:
                    $ref: '#/components/responses/scimGroupNotFound'
                429:
                    $ref: '#/components/responses/scimTooManyRequests'
                500:
                    $ref: '#/components/responses/scimInternalErrorUserUpdate'
        delete:
            tags:
            - SCIM 2.0 - Identity
            - Group Provisioning
            summary: Delete a group
            description: >
                Deletes a group in Postman.


                User accounts that were in the deleted group are deactivated in Postman if the app is assigned to the user only with the deleted group.


                User accounts and the data corresponding to them are **not** deleted. To permanently delete user accounts and their data, [contact Postman support](https://www.postman.com/support/).
            operationId: deleteGroup
            responses:
                204:
                    description: Group Deleted
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            example:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: This Postman team doesn't exist anymore.
                                status: 400
                401:
                    $ref: '#/components/responses/scimUnauthorized'
                403:
                    $ref: '#/components/responses/scimForbidden'
                404:
                    $ref: '#/components/responses/scimGroupNotFound'
                429:
                    $ref: '#/components/responses/scimTooManyRequests'
                500:
                    $ref: '#/components/responses/scimInternalErrorUserUpdate'
        patch:
            tags:
            - SCIM 2.0 - Identity
            - Group Provisioning
            summary: Update a group
            description: >
                Updates a group's information. Using this endpoint you can:


                - Update a group's name.

                - Add or remove members from a Postman group.
            requestBody:
                content:
                    application/json:
                        schema: {}
                        examples:
                            Update a Group Name:
                                value:
                                    schemas:
                                    - urn:ietf:params:scim:api:messages:2.0:PutOp
                                    Operations:
                                    - op: replace
                                        value:
                                            id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                                            displayName: Test-API
                            Add and Remove Team Members:
                                value:
                                    schemas:
                                    - urn:ietf:params:scim:api:messages:2.0:PutOp
                                    Operations:
                                    - op: remove
                                        path: members[value eq "89bb1940b90545759e7f6f887cfb368e"]
                                    - op: add
                                        path: members
                                        value:
                                        - value: 23a35c2723d34c03b4c56443c09e7173
                                            display: taylor.lee@example.com
                            Replace Team Members:
                                value:
                                    schemas:
                                    - urn:ietf:params:scim:api:messages:2.0:PutOp
                                    Operations:
                                    - op: replace
                                        path: members
                                        value:
                                        - value: 23a35c2723d34c03b4c56443c09e7173
                                            display: taylor.lee@example.com
                                        - value: 89bb1940b90545759e7f6f887cfb368e
                                            display: alex.cruz@example.com
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Update a Group Name:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:schemas:core:2.0:Group
                                        id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                                        displayName: Test-API
                                        members: ''
                                        externalId: 1234
                                        meta:
                                            resourceType: Group
                                            created: 2022-02-22T04:24:13.000Z
                                            lastModified: 2022-02-22T04:24:13.000Z
                                Add and Remove Team Members:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:schemas:core:2.0:Group
                                        id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                                        displayName: Test-API
                                        members:
                                        - value: 23a35c2723d34c03b4c56443c09e7173
                                            display: taylor.lee@example.com
                                        externalId: 1234
                                        meta:
                                            resourceType: Group
                                            created: 2022-02-22T04:24:13.000Z
                                            lastModified: 2022-02-22T04:24:13.000Z
                                Replace Team Members:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:schemas:core:2.0:Group
                                        id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                                        displayName: Test-API
                                        members:
                                        - value: 23a35c2723d34c03b4c56443c09e7173
                                            display: taylor.lee@example.com
                                        - value: 89bb1940b90545759e7f6f887cfb368e
                                            display: alex.cruz@example.com
                                        externalId: 1234
                                        meta:
                                            resourceType: Group
                                            created: 2022-02-22T04:24:13.000Z
                                            lastModified: 2022-02-22T04:24:13.000Z
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Bad Request:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: Couldn't update this team member's username. Try again — it should work next time around.
                                        status: 400
                                Invalid Team:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: This Postman team doesn't exist anymore.
                                        status: 400
                                Invalid Syntax:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        scimType: invalidSyntax
                                        detail: The request body seems to be incomplete or have unsupported characters.
                                        status: 400
                401:
                    $ref: '#/components/responses/scimUnauthorized'
                403:
                    $ref: '#/components/responses/scimForbidden'
                404:
                    $ref: '#/components/responses/scimGroupNotFound'
                429:
                    $ref: '#/components/responses/scimTooManyRequests'
                500:
                    $ref: '#/components/responses/scimInternalErrorUserUpdate'
        parameters:
        - $ref: '#/components/parameters/groupId'
    /scim/v2/ResourceTypes:
        get:
            tags:
            - SCIM 2.0 - Identity
            summary: Get resource types
            description: Gets all the resource types supported by Postman's SCIM API.
            operationId: getResourceTypes
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                            - schemas:
                                - urn:ietf:params:scim:schemas:core:2.0:ResourceType
                                id: User
                                name: User
                                endpoint: /Users
                                description: User Account
                                schema: urn:ietf:params:scim:schemas:core:2.0:User
                                schemaExtensions:
                                - schema: urn:ietf:params:scim:schemas:extension:enterprise:2.0:User
                                    required: true
                401:
                    $ref: '#/components/responses/unauthorized'
                500:
                    $ref: '#/components/responses/scimInternalErrorUserUpdate'
    /scim/v2/ServiceProviderConfig:
        get:
            tags:
            - SCIM 2.0 - Identity
            summary: Get service provider configuration
            description: Gets the Postman SCIM API configuration information. This includes a list of supported operations.
            operationId: serviceProviderConfig
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                schemas:
                                - urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig
                                documentationUri: https://learning.postman.com/docs/administration/managing-your-team/configuring-scim
                                patch:
                                    supported: true
                                bulk:
                                    supported: false
                                    maxOperations: 0
                                    maxPayloadSize: 0
                                filter:
                                    supported: true
                                    maxResults: 100
                                changePassword:
                                    supported: false
                                sort:
                                    supported: false
                                etag:
                                    supported: false
                                authenticationSchemes:
                                - name: OAuth Bearer Token
                                    description: Authentication scheme using the OAuth Bearer Token Standard
                                    specUri: http://www.rfc-editor.org/info/rfc6750
                                    type: oauthbearertoken
                                meta:
                                    resourceType: ServiceProviderConfig
                                    location: https://api.getpostman.com/scim/v2/ServiceProviderConfig
                401:
                    $ref: '#/components/responses/scimUnauthorized'
                500:
                    $ref: '#/components/responses/scimInternalErrorUserUpdate'
    /scim/v2/Users:
        get:
            tags:
            - SCIM 2.0 - Identity
            - User Provisioning
            summary: Get all user resources
            description: Gets information about all Postman team members.
            operationId: fetchAllUserResources
            parameters:
            - name: startIndex
                in: '"query"'
                schema:
                    name: startIndex
                    in: '"query"'
            - name: count
                in: '"query"'
                schema:
                    name: count
                    in: '"query"'
            - name: filter
                in: '"query"'
                schema:
                    name: filter
                    in: '"query"'
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Successful Response:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:ListResponse
                                        totalResults: 1000
                                        startIndex: 1
                                        itemsPerPage: 2
                                        Resources:
                                        - schemas:
                                            - urn:ietf:params:scim:schemas:core:2.0:User
                                            id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                                            userName: taylor.lee@example.com
                                            name:
                                                givenName: Taylor
                                                familyName: Lee
                                            externalId: 12345678
                                            active: true
                                            meta:
                                                resourceType: User
                                                created: 2021-02-22T04:24:13.000Z
                                                lastModified: 2021-02-22T04:24:13.000Z
                                        - schemas:
                                            - urn:ietf:params:scim:schemas:core:2.0:User
                                            id: 123775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                                            userName: alex.cruz@example.com
                                            name:
                                                givenName: Alex
                                                familyName: Cruz
                                            externalId: 87654321
                                            active: true
                                            meta:
                                                resourceType: User
                                                created: 2021-02-22T04:24:13.000Z
                                                lastModified: 2021-02-22T04:24:13.000Z
                                No Results Found:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:ListResponse
                                        totalResults: 0
                                        startIndex: 1
                                        itemsPerPage: 0
                                        Resources: []
                                Filter Results:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:ListResponse
                                        totalResults: 1000
                                        startIndex: 1
                                        itemsPerPage: 1
                                        Resources:
                                        - schemas:
                                            - urn:ietf:params:scim:schemas:core:2.0:User
                                            id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                                            userName: taylor.lee@example.com
                                            name:
                                                givenName: Taylor
                                                familyName: Lee
                                            externalId: 12345678
                                            active: true
                                            meta:
                                                resourceType: User
                                                created: 2021-02-22T04:24:13.000Z
                                                lastModified: 2021-02-22T04:24:13.000Z
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Bad Request:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: This Postman team doesn't exist anymore.
                                        status: 400
                                Using Incorrect Filter:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: You've used filter(s) that Postman doesn't support.
                                        status: 400
                401:
                    $ref: '#/components/responses/scimUnauthorized'
                403:
                    description: Forbidden
                    content:
                        application/json:
                            schema: {}
                            example:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.
                                status: 403
                429:
                    $ref: '#/components/responses/scimTooManyRequests'
                500:
                    $ref: '#/components/responses/scimInternalErrorUserUpdate'
        post:
            tags:
            - SCIM 2.0 - Identity
            - User Provisioning
            summary: Create a user
            description: >
                Creates a new user account in Postman and adds the user to your organization's Postman team. If the account does not already exist, this also activates the user so they can authenticate in to your Postman team.


                If the account already exists, the system sends the user an [email invite](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#inviting-users) to join the Postman team. The user joins the team once they accept the invite.


                By default, the system assigns new users the developer role. You can [update user roles in Postman](https://learning.postman.com/docs/administration/managing-your-team/managing-your-team/#managing-team-roles).
            operationId: createUser
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:User
                            userName: taylor.lee@example.com
                            name:
                                givenName: Taylor
                                familyName: Lee
                            displayName: Taylor Lee
                            locale: en-US
                            groups:
                            - Test Group
                            active: true
            responses:
                201:
                    description: Created
                    content:
                        application/json:
                            schema: {}
                            example:
                                schemas:
                                - urn:ietf:params:scim:schemas:core:2.0:User
                                id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                                userName: taylor.lee@example.com
                                name:
                                    givenName: Test
                                    familyName: User
                                externalId: 12345678
                                active: true
                                meta:
                                    resourceType: User
                                    created: 2021-02-22T04:24:13.000Z
                                    lastModified: 2021-02-22T04:24:13.000Z
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Invalid Syntax:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        scimType: invalidSyntax
                                        detail: The request body seems to be incomplete or have unsupported characters.
                                        status: 400
                                Invalid Team:
                                    value:
                                        detail: This Postman team doesn't exist anymore.
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        status: 400
                                Not Enterprise:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: Only Postman teams on the Enterprise plan can use SCIM provisioning. Upgrade your plan.
                                        status: 400
                                No Slots Available:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: No slots available on your Postman team. Purchase or free up slots to invite more members. For help, contact Team Admins or members with a Billing role.
                                        status: 400
                401:
                    $ref: '#/components/responses/scimUnauthorized'
                403:
                    $ref: '#/components/responses/scimForbidden'
                409:
                    description: Conflict
                    content:
                        application/json:
                            schema: {}
                            example:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                scimType: uniqueness
                                detail: This person is already a member of the team.
                                status: 409
                429:
                    $ref: '#/components/responses/scimTooManyRequests'
                500:
                    $ref: '#/components/responses/scimInternalErrorUserUpdate'
    /scim/v2/Users/{userId}:
        get:
            tags:
            - SCIM 2.0 - Identity
            - User Provisioning
            summary: Get a user resource
            description: Gets information about a Postman team member.
            operationId: fetchUserResource
            responses:
                200:
                    $ref: '#/components/responses/scimUserResource'
                400:
                    $ref: '#/components/responses/scimBadRequest'
                401:
                    $ref: '#/components/responses/scimUnauthorized'
                403:
                    description: Forbidden
                    content:
                        application/json:
                            schema: {}
                            example:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.
                                status: 403
                404:
                    $ref: '#/components/responses/scimUserNotFound'
                429:
                    description: Too Many Requests
                    content:
                        application/json:
                            schema: {}
                            example:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: That's 300 attempts in less than a minute. Wait for a minute and then try again.
                                status: 429
                500:
                    $ref: '#/components/responses/scimInternalErrorUser'
        put:
            tags:
            - SCIM 2.0 - Identity
            - User Provisioning
            summary: Update a user
            description: >
                Updates a user's first and last name in Postman.


                **Note:**


                You can only use the SCIM API to update a user's first and last name. You cannot update any other user attributes with the API.
            operationId: updateUserInformation
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            schemas:
                            - urn:ietf:params:scim:schemas:core:2.0:User
                            name:
                                givenName: Taylor
                                familyName: Lee
            responses:
                200:
                    $ref: '#/components/responses/scimUserResource'
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Bad Request:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: Couldn't update this team member's username. Try again — it should work next time around.
                                        status: 400
                                Invalid Team:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: This Postman team doesn't exist anymore.
                                        status: 400
                                Invalid Syntax:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        scimType: invalidSyntax
                                        detail: The request body seems to be incomplete or have unsupported characters.
                                        status: 400
                401:
                    $ref: '#/components/responses/scimUnauthorized'
                403:
                    $ref: '#/components/responses/scimForbidden'
                404:
                    $ref: '#/components/responses/scimUserNotFound'
                429:
                    $ref: '#/components/responses/scimTooManyRequests'
                500:
                    $ref: '#/components/responses/scimInternalErrorUserUpdate'
        patch:
            tags:
            - SCIM 2.0 - Identity
            - User Provisioning
            summary: Update a user's state
            description: >
                Updates a user's active state in Postman.


                ### Reactivating users


                By setting the `active` property from `false` to `true`, this reactivates an account. This allows the account to authenticate in to Postman and adds the account back on to your Postman team.
            operationId: updateUserState
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            schemas:
                            - urn:ietf:params:scim:api:messages:2.0:PatchOp
                            Operations:
                            - op: replace
                                value:
                                    active: true
            responses:
                200:
                    $ref: '#/components/responses/scimUserResource'
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Bad Request:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        scimType: invalidSyntax
                                        detail: You've used operation that Postman doesn't support.
                                        status: 400
                                Invalid Team:
                                    value:
                                        schemas:
                                        - urn:ietf:params:scim:api:messages:2.0:Error
                                        detail: Team doesn't exist.
                                        status: 400
                401:
                    $ref: '#/components/responses/scimUnauthorized'
                403:
                    $ref: '#/components/responses/scimForbidden'
                404:
                    $ref: '#/components/responses/scimUserNotFound'
                429:
                    $ref: '#/components/responses/scimTooManyRequests'
                500:
                    $ref: '#/components/responses/scimInternalErrorUserUpdate'
        parameters:
        - $ref: '#/components/parameters/userId'
    /security/api-validation:
        post:
            tags:
            - API Security
            summary: Schema security validation
            description: >
                Performs a security analysis on the given definition and returns any issues. This can help you understand their impact and provides solutions to help you resolve the errors. You can include this endpoint to your CI/CD process to automate schema validation.


                For more information, read our [API definition warnings](https://learning.postman-beta.com/docs/api-governance/api-definition/api-definition-warnings/) documentation.


                **Note:**


                The maximum allowed size of the definition is 10 MB.
            operationId: schemaSecurityValidation
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            schema:
                                type: openapi3
                                language: json
                                schema: '{"openapi":"3.0.0","info":{"version":"1","title":"temp","license":{"name":"MIT"}},"servers":[{"url":"https://petstore.swagger.io/v1"}],"paths":{"/user":{"get":{"summary":"Details about a user","operationId":"listUser","tags":["user"],"parameters":[{"name":"id","in":"query","description":"ID of the user","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"Details about a user","headers":{"x-next":{"description":"A link to the next page of responses","schema":{"type":"string"}}},"content":{"application/json":{"schema":{$ref:"#/components/schemas/User"}}}},"default":{"description":"unexpected error","content":{"application/json":{"schema":{$ref:"#/components/schemas/Error"}}}}}}}},"components":{"schemas":{"User":{"type":"object","required":["id","name"],"properties":{"id":{"type":"integer","format":"int64"},"name":{"type":"string"},"tag":{"type":"string"}}},"Error":{"type":"object","required":["code","message"],"properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"}}}},"securitySchemes":{"BasicAuth":{"type":"http","scheme":"basic"}}},"security":[{"BasicAuth":[]}]}'
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            examples:
                                No Warnings Found:
                                    value:
                                        warnings: []
                                Successful Response with Warnings:
                                    value:
                                        warnings:
                                        - severity: MEDIUM
                                            message: HTTP authentication scheme is using an unknown scheme.
                                            location:
                                                start:
                                                    line: 1
                                                    column: 1116
                                                end:
                                                    line: 1
                                                    column: 1118
                                            dataPath:
                                            - components
                                            - securitySchemes
                                            - BasicAuth
                                            - scheme
                                            possibleFixUrl: https://go.pstmn.io/openapi3-security-warnings#http-authentication-scheme-is-using-an-unknown-scheme
                                            category:
                                                name: Broken User Authentication
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Invalid Schema:
                                    value:
                                        error:
                                            name: Invalid schema
                                            reason: Provided schema type is not supported.
                                Payload Too Large:
                                    value:
                                        error:
                                            message: request entity too large
                                            name: PayloadTooLargeError
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /webhooks:
        post:
            tags:
            - Webhooks
            summary: Create a webhook
            description: Creates a webhook that triggers a collection with a custom payload. You can get the webhook's URL from the `webhookUrl` property in the endpoint's response.
            operationId: createWebhook
            parameters:
            - $ref: '#/components/parameters/workspaceQueryId'
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            webhook:
                                name: Test Webhook
                                collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                webhook:
                                    id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                    name: Test Webhook
                                    collection: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    webhookUrl: https://newman-api.getpostman.com/run/12345678/267a6e99-b6da-407c-a96f-03be2d6282fb
                                    uid: 12345678-1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /workspaces:
        get:
            tags:
            - Workspaces
            summary: Get all workspaces
            description: >
                Gets all [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/). The response includes your workspaces and any workspaces that you have access to.


                **Note:**


                This endpoint's response contains the visibility field. Visibility determines who can access the workspace:


                - `only-me` — Applies to the **My Workspace** workspace.

                - `personal` — Only you can access the workspace.

                - `team` — All team members can access the workspace.

                - `private-team` — Only invited team members can access the workspace.

                - `public` — Everyone can access the workspace.
            operationId: allWorkspaces
            parameters:
            - name: type
                in: '"query"'
                description: >
                    The type of workspace to filter the response by:


                    - `team` — Return only team workspaces.

                    - `personal` — Return only personal workspaces.
                required: false
                schema:
                    name: type
                    in: '"query"'
                    description: >
                        The type of workspace to filter the response by:


                        - `team` — Return only team workspaces.

                        - `personal` — Return only personal workspaces.
                    required: false
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            examples:
                                Successful Response:
                                    value:
                                        workspaces:
                                        - id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                            name: Test Workspace
                                            type: personal
                                            visibility: personal
                                        - id: f8801e9e-03a4-4c7b-b31e-5db5cd771696
                                            name: Team Workspace
                                            type: team
                                            visibility: private-team
                                Filter by Type:
                                    value:
                                        workspaces:
                                        - id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                            name: Test Workspace
                                            type: personal
                                            visibility: personal
                401:
                    $ref: '#/components/responses/unauthorized'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        post:
            tags:
            - Workspaces
            summary: Create a workspace
            description: >
                Creates a new [workspace](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).


                ### Important:


                We **deprecated** linking collections or environments between workspaces. We do **not** recommend that you do this.


                If you have a linked collection or environment, note the following:


                - The endpoint does **not** create a clone of a collection or environment.

                - Any changes you make to a linked collection or environment changes them in **all** workspaces.

                - If you delete a collection or environment linked between workspaces, the system deletes it in **all** the workspaces.
            operationId: createWorkspace
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            workspace:
                                name: Test Workspace
                                type: personal
                                description: This is a test personal workspace.
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                workspace:
                                    id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                    name: Test Workspace
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundDatabase'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
    /workspaces/{workspaceId}:
        get:
            tags:
            - Workspaces
            summary: Get a workspace
            description: >
                Gets information about a workspace.


                **Note:**


                This endpoint's response contains the `visibility` field. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:


                - `only-me` — Applies to the **My Workspace** workspace.

                - `personal` — Only you can access the workspace.

                - `team` — All team members can access the workspace.

                - `private-team` — Only invited team members can access the workspace.

                - `public` — Everyone can access the workspace.
            operationId: singleWorkspace
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                workspace:
                                    id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                    name: Team Workspace
                                    type: team
                                    description: The Test team workspace.
                                    visibility: private-team
                                    createdBy: 12345678
                                    updatedBy: 12345678
                                    createdAt: 2022-07-06T16:18:32.000Z
                                    updatedAt: 2022-07-06T20:55:13.000Z
                                    collections:
                                    - id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                        name: Test Collection
                                        uid: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    environments:
                                    - id: 5daabc50-8451-43f6-922d-96b403b4f28e
                                        name: Test Environment
                                        uid: 12345678-5daabc50-8451-43f6-922d-96b403b4f28e
                                    mocks:
                                    - id: e3d951bf-873f-49ac-a658-b2dcb91d3289
                                        name: Test Mock
                                        uid: 12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289
                                    monitors:
                                    - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                        name: Test Monitor
                                        uid: 12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                                    apis:
                                    - id: 387c2863-6ee3-4a56-8210-225f774edade
                                        name: Test API
                                        uid: 12345678-387c2863-6ee3-4a56-8210-225f774edade
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundDatabase'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        put:
            tags:
            - Workspaces
            summary: Update a workspace
            description: >
                Updates a workspace.


                **Note:**


                You can change a workspace's type from `personal` to `team`, but you **cannot** change a workspace from `team` to `personal`.


                ### Important:


                We **deprecated** linking collections or environments between workspaces. We do **not** recommend that you do this.


                If you have a linked collection or environment, note the following:


                - The endpoint does **not** create a clone of a collection or environment.

                - Any changes you make to a linked collection or environment changes them in **all** workspaces.

                - If you delete a collection or environment linked between workspaces, the system deletes it in **all** the workspaces.
            operationId: updateWorkspace
            requestBody:
                content:
                    application/json:
                        schema: {}
                        example:
                            workspace:
                                name: Test Workspace
                                description: This is a test team workspace.
                                type: team
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                workspace:
                                    id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                    name: Test Workspace
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: invalidUIDError
                                    message: The ID provided is not a valid UID.
                401:
                    $ref: '#/components/responses/unauthorized'
                403:
                    description: Forbidden
                    content:
                        application/json:
                            schema: {}
                            example:
                                error:
                                    name: forbiddenError
                                    message: You do not have access to update this workspace.
                404:
                    $ref: '#/components/responses/instanceNotFoundWorkspace'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        delete:
            tags:
            - Workspaces
            summary: Delete a workspace
            description: >
                Deletes an existing workspace.


                ### Important:


                If you delete a workspace that has a linked collection or environment with another workspace, this will delete the collection and environment in **all** workspaces.
            operationId: deleteWorkspace
            responses:
                200:
                    description: Successful Response
                    content:
                        application/json:
                            schema: {}
                            example:
                                workspace:
                                    id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                401:
                    $ref: '#/components/responses/unauthorized'
                404:
                    $ref: '#/components/responses/instanceNotFoundWorkspace'
                429:
                    $ref: '#/components/responses/rateLimited'
                500:
                    $ref: '#/components/responses/internalServerError'
        parameters:
        - $ref: '#/components/parameters/workspaceId'
components:
    schemas: {}
    responses:
        addCollection:
            description: Created
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                id: 12345678-61867bcc-c4c1-11ed-afa1-0242ac120002
        apiInstanceNotFoundError:
            description: API Not Found
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: instanceNotFoundError
                        title: Resource not found
                        detail: We could not find the API you are looking for
        apiNotFoundError:
            description: API Not Found
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: instanceNotFoundError
                        title: We could not find the API you are looking for
                        detail: We could not find the API you are looking for.
        apiVersionInstanceNotFoundError:
            description: API Not Found
            content:
                application/problem+json:
                    schema: {}
                    example:
                        error:
                            name: instanceNotFoundError
                            message: We could not find the API version you are looking for
        apiVersionNotFound:
            description: Not Found
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: VersionNotFound
                        title: API Version not found.
                        details: We could not find the API Version you are looking for.
        badRequest:
            description: Bad Request
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: badRequest
                        title: Invalid request
                        detail: Missing parameter, workspaceId
        collectionInstanceNotFoundError:
            description: Collection Not Found
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: instanceNotFoundError
                        title: Collection not found
                        detail: We could not find a collection you are looking for
        createApi:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                id: 90ca9f5a-c4c4-11ed-afa1-0242ac120002
                                name: Test API
                                summary: Testing API
                                createdAt: 2023-02-17T04:09:01.000Z
                                createdBy: 12345678
                                updatedAt: 2023-02-17T04:09:13.000Z
                                updatedBy: 12345678
                                description: This is a test API.
        createApiSchema:
            description: Created
            content:
                application/json:
                    schema: {}
                    examples:
                        Create Schema:
                            value:
                                type: openapi:3
                                files:
                                - path: NewPet.json
                                    createdBy: 557089
                                    id: 41a3d7fd-bf9a-4053-b20e-37453962b4d6
                                    createdAt: 2023-03-21T10:10:54.000Z
                                    name: NewPet.json
                                    updatedBy: 557089
                                    updatedAt: 2023-03-21T10:10:54.000Z
                                - path: Pet.json
                                    createdBy: 557089
                                    id: 93502b81-9f47-45e1-94f7-64882c92519b
                                    createdAt: 2023-03-21T10:10:54.000Z
                                    name: Pet.json
                                    updatedBy: 557089
                                    updatedAt: 2023-03-21T10:10:54.000Z
                                - path: common/Error.json
                                    createdBy: 557089
                                    id: 72f4e1c2-5bf8-4247-ab3c-42bcdcc9ae9c
                                    createdAt: 2023-03-21T10:10:54.000Z
                                    name: Error.json
                                    updatedBy: 557089
                                    updatedAt: 2023-03-21T10:10:54.000Z
                                - path: parameters.json
                                    createdBy: 557089
                                    id: 2fdc8ea1-d02e-4e50-989e-6fa28f42b995
                                    createdAt: 2023-03-21T10:10:54.000Z
                                    name: parameters.json
                                    updatedBy: 557089
                                    updatedAt: 2023-03-21T10:10:54.000Z
                                - root:
                                        enabled: true
                                    path: swagger.json
                                    createdBy: 557089
                                    id: b4fc1bdc-6587-4f9b-95c9-f768146089b4
                                    createdAt: 2023-03-21T10:10:54.000Z
                                    name: swagger.json
                                    updatedBy: 557089
                                    updatedAt: 2023-03-21T10:10:54.000Z
                                createdBy: 557089
                                createdAt: 2023-03-21T10:10:54.000Z
                                id: b4fc1bdc-6587-4f9b-95c9-f768146089b4
                                updatedBy: 557089
                                updatedAt: 2023-03-21T10:10:54.000Z
                        Create Schema with Proto:
                            value:
                                type: proto:2
                                files:
                                - path: index.proto
                                    createdBy: 557089
                                    id: 41a3d7fd-bf9a-4053-b20e-37453962b4d6
                                    createdAt: 2023-03-21T10:10:54.000Z
                                    name: index.proto
                                    updatedBy: 557089
                                    updatedAt: 2023-03-21T10:10:54.000Z
                                    root:
                                        enabled: true
                                createdBy: 557089
                                createdAt: 2023-03-21T10:10:54.000Z
                                id: b4fc1bdc-6587-4f9b-95c9-f768146089b4
                                updatedBy: 557089
                                updatedAt: 2023-03-21T10:10:54.000Z
        createApiVersion:
            description: Accepted
            headers:
                Location:
                    $ref: '#/components/headers/Location'
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                createdAt: 2023-06-09T14:48:45.000Z
                                updatedAt: 2023-06-09T19:50:49.000Z
        createUpdateSchemaFile:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                                createdBy: 2345
                                updatedBy: 2345
                                createdAt: 2022-03-29T11:37:15Z
                                updatedAt: 2022-03-29T11:37:15Z
                                path: data-model/index.json
                                name: index.json
        removePANElementOrFolder:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Remove an API:
                            value:
                                api:
                                    id: 5360b75f-447e-467c-9299-12fd6c92450d
                        Remove a Collection:
                            value:
                                collection:
                                    id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                        Remove a Workspace:
                            value:
                                workspace:
                                    id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                        Delete a Folder:
                            value:
                                folder:
                                    id: 1
        folderNotEmptyError:
            description: Bad Request
            content:
                application/json:
                    schema: {}
                    example:
                        name: folderNotEmptyError
                        message: You need to empty this folder before deleting it.
        forbiddenError:
            description: Forbidden
            content:
                application/json:
                    schema: {}
                    example:
                        error:
                            name: forbiddenError
                            message: You do not have enough permissions to perform this action.
        forbiddenErrorApi:
            description: Forbidden
            content:
                application/problem+json:
                    schema: {}
                    example:
                        title: You are not permitted to perform the action.
                        detail: Please ensure that you have required permissions
                        type: ForbiddenError
        forbiddenErrorSchema:
            description: Forbidden
            content:
                application/problem+json:
                    schema: {}
                    example:
                        title: You are not permitted to perform the action.
                        detail: You do not have access to perform this operation.
                        type: ForbiddenError
        getAllApis:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                meta:
                                    nextCursor: VGh1IE1hciAxNiAyMDIzIDE3OjIxOjUzIEdNVCswMDAwIChDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSk=
                                    total: 4
                                    limit: 10
                                apis:
                                - updatedBy: 893478
                                    createdBy: 893478
                                    name: New API
                                    summary: ''
                                    description: ''
                                    createdAt: 2023-02-15T06:27:16.000Z
                                    id: 73e15000-bc7a-4802-b80e-05fff18fd7f8
                                    updatedAt: 2023-02-15T06:27:24.000Z
                                - updatedBy: 12345678
                                    createdBy: 12345678
                                    name: Test API
                                    summary: This is a test API.
                                    description: This is an API for testing purposes.
                                    createdAt: 2023-02-15T13:07:08.000Z
                                    id: fec65321-5f55-4feb-8525-be95bccae8dd
                                    updatedAt: 2023-02-15T13:07:08.000Z
                                - updatedBy: 12345678
                                    createdBy: 12345678
                                    name: Test API
                                    summary: This is a test API.
                                    description: This is an API for testing purposes.
                                    createdAt: 2023-02-16T05:52:27.000Z
                                    id: b7c54faa-d119-4572-a18d-e2f5c32348ce
                                    updatedAt: 2023-02-16T05:52:27.000Z
                                - updatedBy: 12345678
                                    createdBy: 12345678
                                    name: Test API
                                    summary: This is a test API.
                                    description: This is an API for testing purposes.
                                    createdAt: 2023-02-16T07:07:16.000Z
                                    id: d535a8ba-ed4b-4c6a-bf1c-13fac95485b8
                                    updatedAt: 2023-02-16T07:07:16.000Z
                        Filtered by createdBy:
                            value:
                                meta:
                                    nextCursor: V2VkIEZlYiAxNSAyMDIzIDEzOjA3OjA4IEdNVCswMDAwIChDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSk=
                                    total: 1
                                    limit: 10
                                apis:
                                - updatedBy: 893478
                                    createdBy: 893478
                                    name: New API
                                    summary: ''
                                    description: ''
                                    createdAt: 2023-02-15T06:27:16.000Z
                                    id: 73e15000-bc7a-4802-b80e-05fff18fd7f8
                                    updatedAt: 2023-02-15T06:27:24.000Z
                        Filter by description:
                            value:
                                meta:
                                    nextCursor: V2VkIEZlYiAxNSAyMDIzIDEzOjA3OjA4IEdNVCswMDAwIChDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSk=
                                    total: 1
                                    limit: 10
                                apis:
                                - updatedBy: 893478
                                    createdBy: 893478
                                    name: New API
                                    summary: ''
                                    description: This is an API for testing purposes.
                                    createdAt: 2023-02-15T06:27:16.000Z
                                    id: 73e15000-bc7a-4802-b80e-05fff18fd7f8
                                    updatedAt: 2023-02-15T06:27:24.000Z
        getAllPANAddElementRequests:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                requests:
                                - id: 1
                                    createdBy: 87654321
                                    createdAt: 2020-06-01T08:32:31.000Z
                                    status: pending
                                    element:
                                        type: api
                                        id: 360b75f-447e-467c-9299-12fd3c92450d
                                        name: Test api
                                        summary: Test api summary
                                - id: 2
                                    createdBy: 12345678
                                    createdAt: 2022-06-09T14:48:45.000Z
                                    message: Please approve this collection
                                    status: denied
                                    element:
                                        type: collection
                                        id: 5360b75f-447e-467c-9299-12fd3c92450d
                                        name: Test Collection
                                        summary: This is a test collection.
                                    response:
                                        createdAt: 2020-06-01T08:32:31.000Z
                                        createdBy: 2272
                                        message: Too many errors, please fix and resubmit
                                meta:
                                    limit: 10
                                    offset: 5
                                    totalCount: 100
        getAllVersions:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                versions:
                                - createdAt: 2022-06-09T14:48:45.000Z
                                    updatedAt: 2022-06-09T19:50:49.000Z
                                    id: 07d940bf-40fc-4acd-a11e-be6769894af0
                                    name: Release 2.0
                                    releaseNotes: This is the second release of the Test API.
                                - createdAt: 2022-06-09T14:48:45.000Z
                                    updatedAt: 2022-06-09T19:50:49.000Z
                                    id: 3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
                                    name: Release 1.0
                                    releaseNotes: This is the first release of the Test API. For more information, read the documentation.
                                meta:
                                    nextCursor: VGh1IE1hciAxNiAyMDIzIDE3OjIxOjUzIEdNVCswMDAwIChDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSk=
                                    limit: 2
                                    total: 100
                        Success with Cursor Response:
                            value:
                                meta:
                                    total: 4
                                    limit: 2
                                    nextCursor: V2VkIEZlYiAxNSAyMDIzIDEzOjUyOjAyIEdNVCswMDAwIChDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSk=
                                versions:
                                - createdAt: 2023-02-15T13:41:43.000Z
                                    name: v1
                                    id: 12691e5b-4a6f-4bc7-8335-4ce9b7c5c2ae
                                    releaseNotes: ''
                                    updatedAt: 2023-02-15T13:41:58.000Z
                                - createdAt: 2023-02-15T13:47:23.000Z
                                    name: v2
                                    id: 2665bfbf-888a-48f6-98fa-24c0b7689207
                                    releaseNotes: ''
                                    updatedAt: 2023-02-15T13:47:27.000Z
                        Response with cursor Query Parameter:
                            value:
                                meta:
                                    total: 4
                                    limit: 10
                                versions:
                                - createdAt: 2023-02-17T10:39:51.000Z
                                    name: v4
                                    id: bc792958-ffd5-4a4c-bcf5-1c07cb8f277b
                                    releaseNotes: ''
                                    updatedAt: 2023-02-17T10:39:57.000Z
        getAnApi:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                createdAt: 2022-06-09T14:48:45.000Z
                                updatedAt: 2022-06-09T19:50:49.000Z
                                id: 5360b75f-447e-467c-9299-12fd6c92450d
                                name: Test API
                                summary: Test API.
                                description: This is a test API.
                                createdBy: 12345678
                                updatedBy: 12345678
                        Get Linked Collections:
                            value:
                                createdAt: 2022-06-09T14:48:45.000Z
                                updatedAt: 2022-06-09T19:50:49.000Z
                                id: 5360b75f-447e-467c-9299-12fd6c92450d
                                name: Test API
                                summary: Test API.
                                description: This is a test API.
                                createdBy: 12345678
                                updatedBy: 12345678
                                collections:
                                - id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                                - id: 16bb367e-fafb-4ef3-933b-ee3d971866fc
                        Successful Response for API Viewers:
                            value:
                                createdAt: 2022-06-09T14:48:45.000Z
                                updatedAt: 2022-06-09T19:50:49.000Z
                                id: 5360b75f-447e-467c-9299-12fd6c92450d
                                name: Test API
                                summary: Test API.
                                description: This is a test API.
                                createdBy: 12345678
                                updatedBy: 12345678
                                versions:
                                - id: 2360b75f-447e-467c-9299-12fd6c924502
                                    name: version-name-1
                                - id: 5260b75f-447e-467c-9299-12f16c924503
                                    name: version-name-2
                        Response with the include Parameter:
                            value:
                                createdAt: 2022-06-09T14:48:45.000Z
                                updatedAt: 2022-06-09T19:50:49.000Z
                                id: 5360b75f-447e-467c-9299-12fd6c92450d
                                name: Test API
                                summary: Test API.
                                description: This is a test API.
                                createdBy: 12345678
                                updatedBy: 12345678
                                schemas:
                                    id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                                collections:
                                - id: 16bb367e-fafb-4ef3-933b-ee3d971866fb
                                - id: 16bb367e-fafb-4ef3-933b-ee3d971866fc
                                versions:
                                - id: version-id-1
                                    name: version-name
                                gitInfo: {}
                        Response for Git-Linked API with the include Parameter:
                            value:
                                createdAt: 2022-06-09T14:48:45.000Z
                                updatedAt: 2022-06-09T19:50:49.000Z
                                id: 5360b75f-447e-467c-9299-12fd6c92450d
                                name: Test API
                                summary: Test API.
                                description: This is a test API.
                                createdBy: 12345678
                                updatedBy: 12345678
                                schemas: []
                                collections: []
                                versions:
                                - id: version-id-1
                                    name: version-name
                                gitInfo:
                                    domain: https://custom-domain.com
                                    organisation: org-name
                                    repository: repo-name
                                    schemaFolder: schema-folder
                                    collectionFolder: collection-folder
        getCollection:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                item:
                                - protocolProfileBehavior:
                                        disableBodyPruning: true
                                    response:
                                    - originalRequest:
                                            url:
                                                host:
                                                - https://api.getpostman.com
                                                raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                                variable:
                                                - description: (Required) The unique identifier of the spacecraft
                                                    key: spacecraftId
                                                    value: <string>
                                                path:
                                                - spacecrafts
                                                - :spacecraftId
                                            method: GET
                                            header:
                                            - description: 'Added as a part of security scheme: apikey'
                                                key: X-Api-Key
                                                value: <API Key>
                                        code: 200
                                        _postman_previewlanguage: json
                                        responseTime: ''
                                        header:
                                        - key: Content-Type
                                            value: application/json
                                        name: The spacecraft corresponding to the provided `spacecraftId`
                                        _postman_previewtype: html
                                        body: >-
                                            {
                                                "id": "<string>",
                                                "name": "commodo",
                                                "type": "capsule",
                                                "description": "pariatur dolo"
                                            }
                                        cookie: []
                                        status: OK
                                        id: 54467f6e-71d7-43d5-acc0-48f948e38528
                                    - originalRequest:
                                            url:
                                                host:
                                                - https://api.getpostman.com
                                                raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                                variable:
                                                - description: (Required) The unique identifier of the spacecraft
                                                    key: spacecraftId
                                                    value: <string>
                                                path:
                                                - spacecrafts
                                                - :spacecraftId
                                            method: GET
                                            header:
                                            - description: 'Added as a part of security scheme: apikey'
                                                key: X-Api-Key
                                                value: <API Key>
                                        code: 404
                                        _postman_previewlanguage: json
                                        responseTime: ''
                                        header:
                                        - key: Content-Type
                                            value: application/json
                                        name: No spacecraft found for the provided `spacecraftId`
                                        _postman_previewtype: html
                                        body: >-
                                            {
                                                "message": "dolore Excepteur"
                                            }
                                        cookie: []
                                        status: Not Found
                                        id: 1231609a-7a3d-444d-aa0c-579703e618f4
                                    - originalRequest:
                                            url:
                                                host:
                                                - https://api.getpostman.com
                                                raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                                variable:
                                                - description: (Required) The unique identifier of the spacecraft
                                                    key: spacecraftId
                                                    value: <string>
                                                path:
                                                - spacecrafts
                                                - :spacecraftId
                                            method: GET
                                            header:
                                            - description: 'Added as a part of security scheme: apikey'
                                                key: X-Api-Key
                                                value: <API Key>
                                        code: 500
                                        _postman_previewlanguage: json
                                        responseTime: ''
                                        header:
                                        - key: Content-Type
                                            value: application/json
                                        name: Unexpected error
                                        _postman_previewtype: html
                                        body: >-
                                            {
                                                "message": "dolore Excepteur"
                                            }
                                        cookie: []
                                        status: Internal Server Error
                                        id: db674465-8cec-4208-9724-42278ca9b83c
                                    id: d3779255-5293-4e58-9b65-8954936e1dca
                                    request:
                                        url:
                                            host:
                                            - https://api.getpostman.com
                                            raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                            variable:
                                            - description: (Required) The unique identifier of the spacecraft
                                                key: spacecraftId
                                                value: <string>
                                            path:
                                            - spacecrafts
                                            - :spacecraftId
                                        method: GET
                                        header:
                                        - key: Accept
                                            value: application/json
                                    name: Read a spacecraft
                                auth:
                                    apikey:
                                    - type: string
                                        key: key
                                        value: X-Api-Key
                                    - type: string
                                        key: value
                                        value: SCBKCDKCHKDHCK
                                    - type: string
                                        key: in
                                        value: header
                                    type: apikey
                                info:
                                    description: Buy or rent spacecrafts
                                    _postman_id: e726de58-f1b3-4edd-a8a7-2579dc799d39
                                    schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                    name: Generated
                                variable:
                                - value: /
                                    type: string
                                    id: 526a20ba-acfb-4549-a841-8edf2d24b929
                                    key: baseUrl
        getPANElementsAndFolders:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                elements:
                                - addedAt: 2021-11-29T06:31:24.000Z
                                    addedBy: 12345678
                                    createdBy: 12345678
                                    createdAt: 2020-06-01T08:32:31.000Z
                                    updatedBy: 12345678
                                    updatedAt: 2021-11-29T06:31:24.000Z
                                    type: api
                                    id: 5360b75f-447e-467c-9299-12fd6c92450d
                                    parentFolderId: 1
                                    name: Billing API
                                    summary: Payments and Account Services API
                                    description: The payments and account services API.
                                    href: https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d
                                - addedAt: 2021-11-29T06:31:26.000Z
                                    addedBy: 12345678
                                    createdBy: 12345678
                                    createdAt: 2020-06-01T13:59:34.000Z
                                    updatedBy: 12345678
                                    updatedAt: 2021-11-29T06:31:26.000Z
                                    type: api
                                    id: 41f6dc6d-d8ab-45c6-8506-74a25acf5d5f
                                    parentFolderId: 2
                                    name: Reporting API
                                    summary: The reporting API.
                                    description: ~
                                    href: https://api.getpostman.com/apis/41f6dc6d-d8ab-45c6-8506-74a25acf5d5f
                                folders:
                                - id: 1
                                    parentFolderId: 0
                                    updatedAt: 2021-11-29T06:31:24.000Z
                                    updatedBy: 12345678
                                    createdBy: 12345678
                                    createdAt: 2020-06-01T08:32:31.000Z
                                    name: Billing
                                    description: The Billing API.
                                    type: folder
                                - id: 2
                                    parentFolderId: 0
                                    updatedAt: 2022-10-17T11:54:51.000Z
                                    updatedBy: 12345678
                                    createdBy: 12345678
                                    createdAt: 2021-03-05T06:27:24.000Z
                                    name: Reporting
                                    description: ~
                                    type: folder
                                meta:
                                    limit: 1000
                                    offset: 0
                                    totalCount: 2
                        List Root Folder's Elements:
                            value:
                                elements:
                                - addedAt: 2021-11-29T06:31:24.000Z
                                    addedBy: 12345678
                                    createdBy: 12345678
                                    createdAt: 2020-06-01T08:32:31.000Z
                                    updatedBy: 12345678
                                    updatedAt: 2021-11-29T06:31:24.000Z
                                    type: api
                                    id: 5360b75f-447e-467c-9299-12fd6c92450d
                                    parentFolderId: 1
                                    name: Billing API
                                    summary: The payments and account services API.
                                    description: ''
                                    href: https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d
                                - addedBy: 12345678
                                    addedAt: 2022-12-07T18:22:15.000Z
                                    createdBy: 12345678
                                    createdAt: 2022-12-07T18:22:15.000Z
                                    updatedBy: 12345678
                                    updatedAt: 2022-12-07T18:22:15.000Z
                                    type: collection
                                    id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    name: Billing API Collection
                                    summary: The Billing API collection.
                                    description: ''
                                    href: https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    parentFolderId: 2
                                    environments:
                                    - 120403-c6cf0fe2-c637-4d30-a640-ed64ec6d0ddb
                                    - 7084-461d8126-22c8-43ed-b99d-27e8a34d8eef
                                folders:
                                - id: 1
                                    parentFolderId: 0
                                    updatedAt: 2021-11-29T06:31:24.000Z
                                    updatedBy: 12345678
                                    createdBy: 12345678
                                    createdAt: 2020-06-01T08:32:31.000Z
                                    name: Billing
                                    description: The Billing API.
                                    type: folder
                                meta:
                                    limit: 1000
                                    offset: 0
                                    totalCount: 2
        getSchema:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                                type: openapi:3
                                createdBy: 2345
                                updatedBy: 2345
                                createdAt: 2022-03-29T11:37:15Z
                                updatedAt: 2022-03-29T11:37:15Z
                                files:
                                    meta:
                                        nextPath: /apis/1fdbff7c-036b-4f8a-91bc-17bf3ae74fd2/schemas/cf98c187-17c1-455f-afbf-d4be51f12770/files?cursor=eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJkaXIvczEuanNvbiJ9
                                    data:
                                    - createdBy: 5000842
                                        path: dir/s1.json
                                        updatedBy: 5000842
                                        updatedAt: 2023-03-16T19:11:24.000Z
                                        createdAt: 2023-03-16T18:38:56.000Z
                                        id: cf98c187-17c1-455f-afbf-d4be51f12770
                                        name: s1.json
                        Get Bundled Schema:
                            value:
                                id: ae2b9ab2-28f2-401d-912f-eca09a78e98b
                                type: openapi:3
                                createdBy: 2345
                                updatedBy: 2345
                                createdAt: 2022-03-29T11:37:15Z
                                updatedAt: 2022-03-29T11:37:15Z
                                content: >-
                                    openapi: '3.0.0'

                                    info:
                                        version: '1.0.0'
                                        title: 'Sample API'
                                        description: Buy or rent spacecrafts

                                    paths:
                                        /spacecrafts/{spacecraftId}:
                                            parameters:
                                                - name: spacecraftId
                                                    description: The unique identifier of the spacecraft
                                                    in: path
                                                    required: true
                                                    schema:
                                                        $ref: '#/components/schemas/SpacecraftId'
                                            get:
                                                summary: Read a spacecraft
                                                responses:
                                                    '200':
                                                        description: The spacecraft corresponding to the provided `spacecraftId`
                                                        content:
                                                            application/json:
                                                                schema:
                                                                    $ref: '#/components/schemas/Spacecraft'
                                                    404:
                                                        description: No spacecraft found for the provided `spacecraftId`
                                                        content:
                                                            application/json:
                                                                schema:
                                                                    $ref: '#/components/schemas/Error'
                                                    500:
                                                        description: Unexpected error
                                                        content:
                                                            application/json:
                                                                schema:
                                                                    $ref: '#/components/schemas/Error'
                                    components:
                                        schemas:
                                            SpacecraftId:
                                                description: The unique identifier of a spacecraft
                                                type: string
                                            Spacecraft:
                                                type: object
                                                required:
                                                    - id
                                                    - names
                                                    - type
                                                properties:
                                                    id:
                                                        $ref: '#/components/schemas/SpacecraftId'
                                                    name:
                                                        type: string
                                                    type:
                                                        type: string
                                                        enum:
                                                            - capsule
                                                            - probe
                                                            - satellite
                                                            - spaceplane
                                                            - station
                                                    description:
                                                        type: string
                                            Error:
                                                type: object
                                                required:
                                                    - message
                                                properties:
                                                    message:
                                                        description: A human readable error message
                                                        type: string
                                        securitySchemes:
                                            ApiKey:
                                                type: apiKey
                                                in: header
                                                name: X-Api-Key
                                    security:
                                        - ApiKey: []
        getSchemaFileContents:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                id: 0784657a-668d-4530-85c8-468becdb06fd
                                name: Test.json
                                path: common/Test.json
                                content: >-
                                    {
                                            "type": "object",
                                            "required": [
                                                    "code",
                                                    "message"
                                            ],
                                            "properties": {
                                                    "code": {
                                                            "type": "integer",
                                                            "format": "int32"
                                                    },
                                                    "message": {
                                                            "type": "string"
                                                    }
                                            }
                                    }
                                createdAt: 2023-03-15T13:27:45.000Z
                                createdBy: 12345678
                                updatedAt: 2023-03-15T13:27:45.000Z
                                updatedBy: 12345678
        getSchemaFiles:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                meta:
                                    nextCursor: eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJOZXdQZXQuanNvbiJ9
                                files:
                                - id: e8a015e0-f472-4bb3-a523-57ce7c4583ed
                                    path: data-model/error.yaml
                                    name: error.yaml
                                    createdAt: 2022-03-29T11:37:15Z
                                    updatedAt: 2022-03-29T11:37:15Z
                                    createdBy: 2345
                                    updatedBy: 2345
                                - id: e8a015e0-f472-4bb3-a523-57ce7c4583ef
                                    path: data-model/error2.yaml
                                    name: error2.yaml
                                    createdAt: 2022-03-29T11:37:15Z
                                    updatedAt: 2022-03-29T11:37:15Z
                                    createdBy: 2345
                                    updatedBy: 2345
        getStatusOfAnAsyncTask:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Failed Status:
                            value:
                                id: 66ae9950-0869-4e65-96b0-1e0e47e771af
                                meta:
                                    url: https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39/sync
                                    model: collection
                                    action: update
                                status: failed
                                details:
                                    error:
                                        message: The API contains invalid schema
                                createdAt: 2019-02-12 19:34:49
                                updatedAt: 2023-02-12 19:34:49
                        Pending Status:
                            value:
                                id: 66ae9950-0869-4e65-96b0-1e0e47e771af
                                meta:
                                    url: https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39/sync
                                    model: collection
                                    action: update
                                status: pending
                                createdAt: 2023-02-12 19:34:49
                                updatedAt: 2023-02-12 19:34:49
                        Completed Status:
                            value:
                                id: 66ae9950-0869-4e65-96b0-1e0e47e771af
                                meta:
                                    url: https://api.getpostman.com/apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39/sync
                                    model: collection
                                    action: update
                                status: completed
                                details:
                                    resources:
                                    - id: collectionID
                                        url: /apis/5360b75f-447e-467c-9299-12fd6c92450d/collections/e726de58-f1b3-4edd-a8a7-2579dc799d39
                                createdAt: 2023-02-12 19:34:49
                                updatedAt: 2023-02-12 19:34:49
        getVersion:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                version:
                                    createdAt: 2022-06-09T14:48:45.000Z
                                    updatedAt: 2022-06-09T19:50:49.000Z
                                    id: 3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
                                    name: Release 1.0
                                    releaseNotes: This is the first release.
                                    schemas:
                                    - id: C1
                                        type: openapi3
                                    collections:
                                    - id: C1
                                        name: collection1
                                    - id: C2
                                        name: collection2
                        Successful Response for API Viewers:
                            value:
                                version:
                                    createdAt: 2022-06-09T14:48:45.000Z
                                    updatedAt: 2022-06-09T19:50:49.000Z
                                    id: 3563baaa-07a2-46ed-9fd2-0e8a3c5f7ec2
                                    name: Release 1.0
                                    releaseNotes: This is the first release.
                                    schemas:
                                    - id: C1
                                        type: openapi:3
                                    collections:
                                    - id: C1
                                        name: collection1
                                    - id: C2
                                        name: collection2
        gitLinkedApiError:
            description: Git-Linked API Errror
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: actionNotAllowedError
                        title: Action not allowed
                        detail: This action is not allowed for git linked APIs
        inconsistentApiState:
            description: API State Inconsistent
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: APIStateInconsistent
                        title: API state seems to be inconsistent.
                        detail: Please perform a Git push from the Postman app to sync state between app and repository.
        instanceNotFoundApi:
            description: Instance Not Found
            content:
                application/json:
                    schema: {}
                    example:
                        error:
                            name: instanceNotFoundError
                            message: We could not find the API you are looking for
        instanceNotFoundDatabase:
            description: Instance Not Found
            content:
                application/json:
                    schema: {}
                    example:
                        error:
                            name: instanceNotFoundError
                            message: Instance not found in the database.
        instanceNotFoundElementFolder:
            description: Not Found
            content:
                application/json:
                    schema: {}
                    examples:
                        Not Found:
                            value:
                                error:
                                    name: instanceNotFoundError
                                    message: The specified API does not exist.
                        Folder Not Found:
                            value:
                                name: instanceNotFoundError
                                message: Instance not found for the model Folder, id 1
        instanceNotFoundEnvironment:
            description: Instance Not Found
            content:
                application/json:
                    schema: {}
                    example:
                        error:
                            name: instanceNotFoundError
                            message: We could not find the environment you are looking for
        instanceNotFoundCollection:
            description: Instance Not Found
            content:
                application/json:
                    schema: {}
                    example:
                        error:
                            name: instanceNotFoundError
                            message: The specified item does not exist.
                            details:
                                item: collection
                                id: 12ece9e1-2abf-4edc-8e34-de66e74114d2
        instanceNotFoundMock:
            description: Not Found
            content:
                application/json:
                    schema: {}
                    example:
                        error:
                            name: instanceNotFoundError
                            message: The specified mock does not exist.
                            details: {}
        instanceNotFoundMonitor:
            description: Instance Not Found
            content:
                application/json:
                    schema: {}
                    example:
                        error:
                            name: instanceNotFoundError
                            message: The specified monitor does not exist.
        instanceNotFoundWorkspace:
            description: Instance Not Found
            content:
                application/json:
                    schema: {}
                    example:
                        error:
                            name: instanceNotFoundError
                            message: The specified workspace does not exist.
        internalServerError:
            description: Internal Server Error
            content:
                application/json:
                    schema: {}
                    example:
                        error:
                            name: serverError
                            message: An error has occurred on the server.
        invalidParamsError:
            description: Invalid Parameters
            content:
                application/json:
                    schema: {}
        invalidNetworkElementRequest:
            description: Bad Request
            content:
                application/json:
                    schema: {}
                    example:
                        name: invalidParamsError
                        message: Status type can only be denied or approved.
        invalidQueryParamsInGetAllElementRequests:
            description: Bad Request
            content:
                application/json:
                    schema: {}
                    example:
                        name: invalidParamsError
                        message: The specified request does not exist.
        mockServerResponse:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    example:
                        createdAt: 2022-08-02T15:08:03.000Z
                        updatedAt: 2022-08-02T15:08:03.000Z
                        id: 965cdd16-fe22-4d96-a161-3d05490ac421
                        name: Internal Server Error
                        statusCode: 500
                        headers:
                        - key: Content-Type
                            value: application/json
                        language: json
                        body: >-
                            {
                                    "message": "Something went wrong; try again later."
                            }
                        createdBy: 12345678
                        updatedBy: 12345678
                        mock: 32cd624d-9986-4f20-9048-89252f722269
        PANElementCreated:
            description: Created
            content:
                application/json:
                    schema: {}
        PANFolderCreated:
            description: Created
            content:
                application/json:
                    schema: {}
        postPANElementOrFolder:
            description: Created
            content:
                application/json:
                    schema: {}
                    examples:
                        Add an API:
                            value:
                                addedAt: 2022-06-09T14:48:45.000Z
                                addedBy: 12345678
                                createdBy: 12345678
                                createdAt: 2021-10-11T09:39:33.000Z
                                updatedBy: 12345678
                                updatedAt: 2022-12-07T17:54:33.000Z
                                type: api
                                id: 5360b75f-447e-467c-9299-12fd6c92450d
                                name: Billing API
                                summary: The payments and account services API.
                                description: ~
                                href: https://api.getpostman.com/apis/fcf87a6d-6d10-4cfa-bed2-0c234ff99f7b
                                parentFolderId: 1
                        Add a Collection:
                            value:
                                addedAt: 2022-12-07T18:22:15.000Z
                                addedBy: 12345678
                                createdBy: 12345678
                                createdAt: 2022-12-07T18:22:15.000Z
                                updatedBy: 12345678
                                updatedAt: 2022-12-07T18:22:15.000Z
                                type: collection
                                id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                name: Billing API Collection
                                summary: The Billing API collection.
                                description: ~
                                href: https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                parentFolderId: 1
                        Add a Collection with Environments:
                            value:
                                addedAt: 2022-12-07T18:22:15.000Z
                                addedBy: 12345678
                                createdBy: 12345678
                                createdAt: 2022-12-07T18:22:15.000Z
                                updatedBy: 12345678
                                updatedAt: 2022-12-07T18:22:15.000Z
                                type: collection
                                id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                name: Billing API Collection
                                summary: The Billing API collection.
                                description: ''
                                href: https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                parentFolderId: 1
                                environments:
                                - 120403-c6cf0fe2-c637-4d30-a640-ed64ec6d0ddb
                                - 7084-461d8126-22c8-43ed-b99d-27e8a34d8eef
                        Add a Workspace:
                            value:
                                addedAt: 2022-12-07T17:59:23.000Z
                                addedBy: 12345678
                                createdBy: 12345678
                                createdAt: 2022-12-07T17:59:23.000Z
                                updatedBy: 12345678
                                updatedAt: 2022-12-07T17:59:23.000Z
                                type: workspace
                                id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                name: Billing Team Workspace
                                summary: The Billing team's workspace.
                                description: ~
                                href: https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                parentFolderId: 1
                        Create a Folder:
                            value:
                                id: 1
                                parentFolderId: 0
                                updatedAt: 2022-12-07T18:00:39.000Z
                                updatedBy: 12345678
                                createdBy: 12345678
                                createdAt: 2022-12-07T18:00:39.000Z
                                name: Billing
                                description: The Billing API.
                                type: folder
        paramMissingError:
            description: Parameter Missing
            content:
                application/json:
                    schema: {}
        putPANElementOrFolder:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Update API:
                            value:
                                addedAt: 2022-06-09T14:48:45.000Z
                                addedBy: 12345678
                                createdBy: 12345678
                                createdAt: 2021-10-11T09:39:33.000Z
                                updatedBy: 12345678
                                updatedAt: 2022-12-07T17:54:33.000Z
                                type: api
                                id: 5360b75f-447e-467c-9299-12fd6c92450d
                                name: Billing API
                                summary: The payments and account services API.
                                description: ~
                                href: https://api.getpostman.com/apis/fcf87a6d-6d10-4cfa-bed2-0c234ff99f7b
                                parentFolderId: 1
                        Update Collection:
                            value:
                                addedAt: 2022-12-07T18:22:15.000Z
                                addedBy: 12345678
                                createdBy: 12345678
                                createdAt: 2022-12-07T18:22:15.000Z
                                updatedBy: 12345678
                                updatedAt: 2022-12-07T18:22:15.000Z
                                type: collection
                                id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                name: Billing API Collection
                                summary: The Billing API collection.
                                description: ~
                                href: https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                parentFolderId: 1
                        Update a Collection's Environments:
                            value:
                                addedAt: 2022-12-07T18:22:15.000Z
                                addedBy: 12345678
                                createdBy: 12345678
                                createdAt: 2022-12-07T18:22:15.000Z
                                updatedBy: 12345678
                                updatedAt: 2022-12-07T18:22:15.000Z
                                type: collection
                                id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                name: Billing API Collection
                                summary: The Billing API collection.
                                description: ''
                                href: https://api.getpostman.com/collections/12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                parentFolderId: 1
                                environments:
                                - 660a6sa-c8sa37-46ca-9sa1d8-7e8c669d1
                                - 02466-c837-46ca-9sa1d8-7e669d1
                        Update Workspace:
                            value:
                                addedAt: 2022-12-07T17:59:23.000Z
                                addedBy: 12345678
                                createdBy: 12345678
                                createdAt: 2022-12-07T17:59:23.000Z
                                updatedBy: 12345678
                                updatedAt: 2022-12-07T17:59:23.000Z
                                type: workspace
                                id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                name: Billing Team Workspace
                                summary: The Billing team's workspace.
                                description: ~
                                href: https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                parentFolderId: 1
                        Update Folder:
                            value:
                                id: 1
                                parentFolderId: 0
                                updatedAt: 2022-12-07T20:27:06.000Z
                                updatedBy: 12345678
                                createdBy: 12345678
                                createdAt: 2022-12-07T17:04:23.000Z
                                name: Billing
                                description: The Billing API.
                                type: folder
        rateLimited:
            description: Too Many Requests
            content:
                application/json:
                    schema: {}
                    example:
                        error: rateLimited
                        message: Rate limit exceeded. Please retry after 1669048687
        respondPANElementAddRequest:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Request Approved:
                            value:
                                request:
                                - id: 1
                                    createdAt: 2022-06-09T14:48:45.000Z
                                    createdBy: 12345678
                                    message: Please add this to the network
                                    status: approved
                                    element:
                                        createdAt: 2022-06-09T14:48:45.000Z
                                        createdBy: 2272
                                        type: api
                                        id: 5360b75f-447e-467c-9299-12fd3c92450d
                                        name: Test api
                                        summary: This is a test API
                        Request Denied:
                            value:
                                request:
                                - id: 2
                                    createdAt: 2022-06-09T14:48:45.000Z
                                    createdBy: 12345678
                                    message: Please add this to the network
                                    status: denied
                                    element:
                                        type: api
                                        id: 5360b75f-447e-467c-9299-12fd3c92450d
                                        name: Test api
                                        summary: This is a test API
                                    response:
                                        createdAt: 2022-06-09T14:48:45.000Z
                                        createdBy: 2272
                                        message: Please fix the API issues first
        schemaInstanceNotFoundError:
            description: Schema Not Found
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: instanceNotFoundError
                        title: Schema not found
                        detail: We could not find a schema linked to this API
        schemaInvalidParamsError:
            description: Schema Already Exists
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: invalidParamsError
                        title: Could not create the resource
                        detail: Schema already exists for this API
        schemaNotFound:
            description: Schema Not Found
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: instanceNotFoundError
                        title: Resource not found
                        detail: We could not find the resource you are looking for
        schemaNotLinked:
            description: Schema Not Linked to API
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: invalidParamError
                        title: Invalid param error
                        detail: Schema is not linked to the API
        scimBadRequest:
            description: Bad Request
            content:
                application/json:
                    schema: {}
                    examples:
                        Invalid Team:
                            value:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: This Postman team doesn't exist anymore.
                                status: 400
        scimInternalErrorGroup:
            description: Internal Server Error
            content:
                application/json:
                    schema: {}
                    example:
                        schemas:
                        - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: Couldn't fetch members of the team.
                        status: 500
        scimInternalErrorGroupUpdate:
            description: Internal Server Error
            content:
                application/json:
                    schema: {}
                    examples:
                        Cannot Get Information:
                            value:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: Unable to fetch information about this team member.
                                status: 500
                        Cannot Update Group:
                            value:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: Couldn't update this team member's information. Try again — it should work next time around.
                                status: 500
                        Cannot Add Team Members:
                            value:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: Unable to add members to the team. Try again — it should work next time around.
                                status: 500
        scimInternalErrorUser:
            description: Internal Server Error
            content:
                application/json:
                    schema: {}
                    example:
                        schemas:
                        - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: Unable to fetch information about this team member.
                        status: 500
        scimInternalErrorUserUpdate:
            description: Internal Server Error
            content:
                application/json:
                    schema: {}
                    examples:
                        Cannot Get Information:
                            value:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: Unable to fetch information about this team member.
                                status: 500
                        Cannot Update User:
                            value:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: Couldn't update this team member's information. Try again — it should work next time around.
                                status: 500
                        Cannot Add Team Members:
                            value:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: Unable to add members to the team. Try again — it should work next time around.
                                status: 500
        scimForbidden:
            description: Forbidden
            content:
                application/json:
                    schema: {}
                    examples:
                        Invalid API Key:
                            value:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: Your API key was generated by a Team Admin who is no longer on your team. Use an API key generated by a Team Admin.
                                status: 403
                        Admin Team Mismatch:
                            value:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: The admin is not allowed to perform this action.
                                status: 403
                        Forbidden:
                            value:
                                schemas:
                                - urn:ietf:params:scim:api:messages:2.0:Error
                                detail: This person isn't a member of the team.
                                status: 403
        scimGroupNotFound:
            description: Not Found
            content:
                application/json:
                    schema: {}
                    example:
                        schemas:
                        - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: This group isn't a member of the team.
                        status: 404
        scimGroupResource:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    example:
                        schemas:
                        - urn:ietf:params:scim:schemas:core:2.0:Group
                        id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                        displayName: Test-API
                        members:
                        - value: b1c794f24f4c49f4b5d503a4cb2686ea
                            display: SCIM 2 Group A
                        externalId: 1234
                        meta:
                            resourceType: Group
                            created: 2022-02-22T04:24:13.000Z
                            lastModified: 2022-02-22T04:24:13.000Z
        scimTooManyRequests:
            description: Too Many Requests
            content:
                application/json:
                    schema: {}
                    example:
                        schemas:
                        - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: That's 180 attempts in less than a minute. Wait for a minute and then try again.
                        status: 429
        scimUserNotFound:
            description: Not Found
            content:
                application/json:
                    schema: {}
                    example:
                        schemas:
                        - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: This person isn't a member of the team.
                        status: 404
        scimUnauthorized:
            description: Unauthorized
            content:
                application/json:
                    schema: {}
                    example:
                        schemas:
                        - urn:ietf:params:scim:api:messages:2.0:Error
                        detail: Unable to access the team. Check if you have entered a valid API key.
                        status: 401
        scimUserResource:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    example:
                        schemas:
                        - urn:ietf:params:scim:schemas:core:2.0:User
                        id: 405775fe15ed41872a8eea4c8aa2b38cda9749812cc55c99
                        userName: taylor.lee@example.com
                        name:
                            givenName: Taylor
                            familyName: Lee
                        externalId: 12345678
                        active: true
                        meta:
                            resourceType: User
                            created: 2021-02-22T04:24:13.000Z
                            lastModified: 2021-02-22T04:24:13.000Z
        serverError:
            description: Internal Server Error
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: https://api.postman.com/problems/internal-server-error
                        title: Internal Server Error
                        detail: Internal Server Error
        serverResponseNotFoundError:
            description: Bad Request
            content:
                application/json:
                    schema: {}
                    example:
                        error:
                            name: serverResponseNotFoundError
                            message: We could not find the mock server response you are looking for.
        syncCollectionWithSchema:
            description: Accepted
            headers:
                Location:
                    $ref: '#/components/headers/Location'
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                taskId: 66ae9950-0869-4e65-96b0-1e0e47e771af
        taskNotFound:
            description: Task Not Found
            content:
                application/problem+json:
                    schema: {}
                    example:
                        detail: Parameter, taskId is in an invalid format.
                        title: The specified parameter is in an invalid format
                        type: invalidParamsError
        unauthorized:
            description: Unauthorized
            content:
                application/json:
                    schema: {}
                    example:
                        error:
                            name: AuthenticationError
                            message: Invalid API Key. Every request requires a valid API Key to be sent.
        unauthorizedApi:
            description: Unauthorized
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: https://api.postman.com/problems/unauthorized
                        title: Unauthorized
                        detail: An API key must be provided in the request header or query string
                        status: 401
                        instance: /collections/12ece9e1-2abf-4edc-8e34-de66e74114d2/requests/%7B%7BrequestId%7D%7D
        unprocessableEntity:
            description: Unprocessable Entity
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: unprocessableEntityError
                        title: Unprocessable Entity
                        detail: Cannot perform action on the requested entity
        updateAnApi:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                createdAt: 2022-06-29T20:46:58.000Z
                                updatedAt: 2022-06-29T20:46:58.000Z
                                id: 5360b75f-447e-467c-9299-12fd6c92450d
                                name: Test API A
                                summary: Test API A Schema
                                description: This is Test API A.
                                createdBy: 12345678
                                updatedBy: 12345678
        updateVersion:
            description: Successful Response
            content:
                application/json:
                    schema: {}
                    examples:
                        Successful Response:
                            value:
                                createdAt: 2022-06-09T14:48:45.000Z
                                updatedAt: 2022-06-09T19:50:49.000Z
                                id: 8d7ba74e-2c36-4e36-a263-f3c0c9ae21d2
                                name: Release 1.5
                                releaseNotes: This is the first public release update.
        v9Unsupported:
            description: v9 Unsupported
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: unsupportedEntityError
                        title: Unsupported API
                        detail: This endpoint does not support v9 APIs.
        versionIdMissing:
            description: Version ID Missing
            content:
                application/problem+json:
                    schema: {}
                    example:
                        title: Invalid request body
                        type: invalidParamError
                        detail: Missing field 'versionId' in the request body
        versionStatusPending:
            description: Version in Pending Status Response
            headers:
                Location:
                    $ref: '#/components/headers/Location'
            content:
                application/json:
                    schema: {}
        versionTask:
            description: Successful Response
            headers:
                Location:
                    description: The URL to get or poll the status of an API version task created.
                    schema:
                        description: The URL to get or poll the status of an API version task created.
            content:
                '*/*':
                    schema: {}
                    examples:
                        Success: {}
        workspaceInstanceNotFoundError:
            description: Workspace Not Found
            content:
                application/problem+json:
                    schema: {}
                    example:
                        title: We could not find the workspace you are looking for
                        detail: We could not find the workspace you are looking for.
                        type: instanceNotFoundError
        workspaceParamMissingError:
            description: Missing Workspace ID
            content:
                application/problem+json:
                    schema: {}
                    example:
                        type: paramMissingError
                        title: Parameter is missing in the request.
                        detail: Parameter, workspaceId is missing in the request.
    parameters:
        Accept:
            name: Accept
            in: '"header"'
            description: The request header to use for Postman v10 and higher only.
            required: true
            schema:
                name: Accept
                in: '"header"'
                description: The request header to use for Postman v10 and higher only.
                required: true
        apiDescription:
            name: description
            in: '"query"'
            description: Return only APIs whose description includes the given value. Matching is not case-sensitive.
            schema:
                name: description
                in: '"query"'
                description: Return only APIs whose description includes the given value. Matching is not case-sensitive.
        apiId:
            name: apiId
            in: '"path"'
            description: The API's ID.
            required: true
            schema:
                name: apiId
                in: '"path"'
                description: The API's ID.
                required: true
        apiVersionId:
            name: apiVersionId
            in: '"path"'
            description: The API version's ID.
            required: true
            schema:
                name: apiVersionId
                in: '"path"'
                description: The API version's ID.
                required: true
        collectionAccessKeyQuery:
            name: access_key
            in: '"query"'
            description: A collection's read-only access key. Using this query parameter does not require an API key to call the endpoint.
            schema:
                name: access_key
                in: '"query"'
                description: A collection's read-only access key. Using this query parameter does not require an API key to call the endpoint.
        collectionId:
            name: collectionId
            in: '"path"'
            description: The collection's ID.
            required: true
            schema:
                name: collectionId
                in: '"path"'
                description: The collection's ID.
                required: true
        collectionIdApi:
            name: collectionId
            in: '"path"'
            description: The collection's ID.
            required: true
            schema:
                name: collectionId
                in: '"path"'
                description: The collection's ID.
                required: true
        createdBy:
            name: createdBy
            in: '"query"'
            description: The user ID of the user that created the resource.
            schema:
                name: createdBy
                in: '"query"'
                description: The user ID of the user that created the resource.
        cursor:
            name: cursor
            in: '"query"'
            description: The pointer to the first record of the set of paginated results.
            schema:
                name: cursor
                in: '"query"'
                description: The pointer to the first record of the set of paginated results.
        elementId:
            name: elementId
            in: '"path"'
            description: The element's ID or UUID. For Postman Collections you must pass the collection's UID (`userId`-`collectionId`) value.
            required: true
            schema:
                name: elementId
                in: '"path"'
                description: The element's ID or UUID. For Postman Collections you must pass the collection's UID (`userId`-`collectionId`) value.
                required: true
        elementType:
            name: elementType
            in: '"path"'
            description: The Private API Network element type.
            required: true
            schema:
                name: elementType
                in: '"path"'
                description: The Private API Network element type.
                required: true
        entityId:
            name: entityId
            in: '"path"'
            description: >
                The collection's UID value.


                **Note:**


                In Postman v10 and earlier, the entity's ID value is one of the following, based on its relation type:


                - `documentation` and `test` — The collection UID value.

                - `environment` — The environment UID value.

                - `mock` — The mock ID value.

                - `monitor` — The monitor ID value.
            required: true
            schema:
                name: entityId
                in: '"path"'
                description: >
                    The collection's UID value.


                    **Note:**


                    In Postman v10 and earlier, the entity's ID value is one of the following, based on its relation type:


                    - `documentation` and `test` — The collection UID value.

                    - `environment` — The environment UID value.

                    - `mock` — The mock ID value.

                    - `monitor` — The monitor ID value.
                required: true
        environmentId:
            name: environmentId
            in: '"path"'
            description: The environment's ID.
            required: true
            schema:
                name: environmentId
                in: '"path"'
                description: The environment's ID.
                required: true
        file-path:
            name: file-path
            in: '"path"'
            description: The path to the schema file.
            required: true
            schema:
                name: file-path
                in: '"path"'
                description: The path to the schema file.
                required: true
        groupId:
            name: groupId
            in: '"path"'
            description: The group's ID.
            required: true
            schema:
                name: groupId
                in: '"path"'
                description: The group's ID.
                required: true
        include:
            name: include
            in: '"query"'
            description: >
                An array that contains additional resources to include in the response. Use this parameter to query for element links to the API, such as collections and schemas:
                        - `collections` — Query for linked Postman collections.
                        - `versions` — Query for linked versions.
                        - `schemas` — Query for linked schemas.
                        - `gitInfo` — Query for information about the API’s git-linked repository.

                **Note:**


                API viewers can only use the `versions` option.
            schema:
                name: include
                in: '"query"'
                description: >
                    An array that contains additional resources to include in the response. Use this parameter to query for element links to the API, such as collections and schemas:
                            - `collections` — Query for linked Postman collections.
                            - `versions` — Query for linked versions.
                            - `schemas` — Query for linked schemas.
                            - `gitInfo` — Query for information about the API’s git-linked repository.

                    **Note:**


                    API viewers can only use the `versions` option.
        limit:
            name: limit
            in: '"query"'
            description: The maximum number of rows to return in the response.
            schema:
                name: limit
                in: '"query"'
                description: The maximum number of rows to return in the response.
        mockId:
            name: mockId
            in: '"path"'
            description: The mock's ID.
            required: true
            schema:
                name: mockId
                in: '"path"'
                description: The mock's ID.
                required: true
        monitorId:
            name: monitorId
            in: '"path"'
            description: The monitor's ID.
            required: true
            schema:
                name: monitorId
                in: '"path"'
                description: The monitor's ID.
                required: true
        relationType:
            name: relationType
            in: '"path"'
            description: >
                The `unclassified` relation type. This relation is used for documentation and testing.


                **Note:**


                In Postman v10 and earlier, this value is one of:


                - `documentation`

                - `test`

                - `mock`

                - `monitor`
            required: true
            schema:
                name: relationType
                in: '"path"'
                description: >
                    The `unclassified` relation type. This relation is used for documentation and testing.


                    **Note:**


                    In Postman v10 and earlier, this value is one of:


                    - `documentation`

                    - `test`

                    - `mock`

                    - `monitor`
                required: true
            example: unclassified
        requestId:
            name: requestId
            in: '"path"'
            description: The element request's ID.
            required: true
            schema:
                name: requestId
                in: '"path"'
                description: The element request's ID.
                required: true
            example: 232
        schemaId:
            name: schemaId
            in: '"path"'
            description: The API schema's ID.
            required: true
            schema:
                name: schemaId
                in: '"path"'
                description: The API schema's ID.
                required: true
        schemaOutput:
            name: bundled
            in: '"query"'
            description: If true, return the schema in a bundled format.
            schema:
                name: bundled
                in: '"query"'
                description: If true, return the schema in a bundled format.
        serverResponseId:
            name: serverResponseId
            in: '"path"'
            description: The server response's ID.
            required: true
            schema:
                name: serverResponseId
                in: '"path"'
                description: The server response's ID.
                required: true
        taskId:
            name: taskId
            in: '"path"'
            description: The task's ID.
            required: true
            schema:
                name: taskId
                in: '"path"'
                description: The task's ID.
                required: true
        userId:
            name: userId
            in: '"path"'
            description: The user's SCIM ID.
            required: true
            schema:
                name: userId
                in: '"path"'
                description: The user's SCIM ID.
                required: true
        versionId:
            name: versionId
            in: '"path"'
            description: The API's version ID.
            required: true
            schema:
                name: versionId
                in: '"path"'
                description: The API's version ID.
                required: true
        versionQuery:
            name: versionId
            in: '"query"'
            description: The API's version ID.
            schema:
                name: versionId
                in: '"query"'
                description: The API's version ID.
        workspaceId:
            name: workspaceId
            in: '"path"'
            description: The workspace's ID.
            required: true
            schema:
                name: workspaceId
                in: '"path"'
                description: The workspace's ID.
                required: true
        workspaceIdApi:
            name: workspaceId
            in: '"query"'
            description: The workspace ID.
            required: true
            schema:
                name: workspaceId
                in: '"query"'
                description: The workspace ID.
                required: true
        workspaceQueryId:
            name: workspaceId
            in: '"query"'
            description: >
                The workspace's ID.


                If you do not include this query parameter, the system defaults to the **My Workspace** workspace.
            required: false
            schema:
                name: workspaceId
                in: '"query"'
                description: >
                    The workspace's ID.


                    If you do not include this query parameter, the system defaults to the **My Workspace** workspace.
                required: false
            example: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
    requestBodies:
        addCollection:
            content:
                application/json:
                    schema: {}
                    examples:
                        Copy a Collection:
                            value:
                                operationType: COPY_COLLECTION
                                data:
                                    collectionId: 12ece9e1-2abf-4edc-8e34-de66e74114d2
                        Generate a Collection from Schema:
                            value:
                                name: Test Collection
                                operationType: GENERATE_FROM_SCHEMA
                        Add a New Collection:
                            value:
                                operationType: CREATE_NEW
                                data:
                                    item:
                                    - protocolProfileBehavior:
                                            disableBodyPruning: true
                                        response:
                                        - originalRequest:
                                                url:
                                                    host:
                                                    - https://api.getpostman.com
                                                    raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                                    variable:
                                                    - description: (Required) The unique identifier of the spacecraft
                                                        key: spacecraftId
                                                        value: <string>
                                                    path:
                                                    - spacecrafts
                                                    - :spacecraftId
                                                method: GET
                                                header:
                                                - description: 'Added as a part of security scheme: apikey'
                                                    key: X-Api-Key
                                                    value: <API Key>
                                            code: 200
                                            _postman_previewlanguage: json
                                            responseTime: ''
                                            header:
                                            - key: Content-Type
                                                value: application/json
                                            name: The spacecraft corresponding to the provided `spacecraftId`
                                            _postman_previewtype: html
                                            body: >-
                                                {
                                                    "id": "<string>",
                                                    "name": "commodo",
                                                    "type": "capsule",
                                                    "description": "pariatur dolo"
                                                }
                                            cookie: []
                                            status: OK
                                            id: 54467f6e-71d7-43d5-acc0-48f948e38528
                                        - originalRequest:
                                                url:
                                                    host:
                                                    - https://api.getpostman.com
                                                    raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                                    variable:
                                                    - description: (Required) The unique identifier of the spacecraft
                                                        key: spacecraftId
                                                        value: <string>
                                                    path:
                                                    - spacecrafts
                                                    - :spacecraftId
                                                method: GET
                                                header:
                                                - description: 'Added as a part of security scheme: apikey'
                                                    key: X-Api-Key
                                                    value: <API Key>
                                            code: 404
                                            _postman_previewlanguage: json
                                            responseTime: ''
                                            header:
                                            - key: Content-Type
                                                value: application/json
                                            name: No spacecraft found for the provided `spacecraftId`
                                            _postman_previewtype: html
                                            body: >-
                                                {
                                                    "message": "dolore Excepteur"
                                                }
                                            cookie: []
                                            status: Not Found
                                            id: 1231609a-7a3d-444d-aa0c-579703e618f4
                                        - originalRequest:
                                                url:
                                                    host:
                                                    - https://api.getpostman.com
                                                    raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                                    variable:
                                                    - description: (Required) The unique identifier of the spacecraft
                                                        key: spacecraftId
                                                        value: <string>
                                                    path:
                                                    - spacecrafts
                                                    - :spacecraftId
                                                method: GET
                                                header:
                                                - description: 'Added as a part of security scheme: apikey'
                                                    key: X-Api-Key
                                                    value: <API Key>
                                            code: 500
                                            _postman_previewlanguage: json
                                            responseTime: ''
                                            header:
                                            - key: Content-Type
                                                value: application/json
                                            name: Unexpected error
                                            _postman_previewtype: html
                                            body: >-
                                                {
                                                    "message": "dolore Excepteur"
                                                }
                                            cookie: []
                                            status: Internal Server Error
                                            id: db674465-8cec-4208-9724-42278ca9b83c
                                        id: d3779255-5293-4e58-9b65-8954936e1dca
                                        request:
                                            url:
                                                host:
                                                - https://api.getpostman.com
                                                raw: https://api.getpostman.com/spacecrafts/:spacecraftId
                                                variable:
                                                - description: (Required) The unique identifier of the spacecraft
                                                    key: spacecraftId
                                                    value: <string>
                                                path:
                                                - spacecrafts
                                                - :spacecraftId
                                            method: GET
                                            header:
                                            - key: Accept
                                                value: application/json
                                        name: Read a spacecraft
                                    auth:
                                        apikey:
                                        - type: string
                                            key: key
                                            value: X-Api-Key
                                        - type: string
                                            key: value
                                            value: SCBKCDKCHKDHCK
                                        - type: string
                                            key: in
                                            value: header
                                        type: apikey
                                    info:
                                        description: Buy or rent spacecrafts
                                        _postman_id: e726de58-f1b3-4edd-a8a7-2579dc799d39
                                        schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                                        name: Generated
                                    variable:
                                    - value: /
                                        type: string
                                        id: 526a20ba-acfb-4549-a841-8edf2d24b929
                                        key: baseUrl
        createAPI:
            description: The request body to create an API.
            content:
                application/json:
                    schema: {}
                    example:
                        name: Test API
                        summary: Testing API
                        description: This is a test API.
        createApiSchema:
            description: The request body to create an API schema.
            content:
                application/json:
                    schema: {}
                    examples:
                        Create Schema:
                            value:
                                type: openapi:3
                                files:
                                - path: swagger.json
                                    content: >-
                                        {
                                            "openapi": "3.0.0",
                                            "info": {
                                                "version": "1.0.0",
                                                "title": "Sample API",
                                                "description": "Buy or rent spacecrafts"
                                            },
                                            "paths": {
                                                "/spacecrafts/{spacecraftId}": {
                                                    "parameters": [
                                                        {
                                                            "name": "spacecraftId",
                                                            "description": "The unique identifier of the spacecraft",
                                                            "in": "path",
                                                            "required": true,
                                                            "schema": {
                                                                $ref: "#/components/schemas/SpacecraftId"
                                                            }
                                                        }
                                                    ],
                                                    "get": {
                                                        "summary": "Read a spacecraft",
                                                        "responses": {
                                                            "200": {
                                                                "description": "The spacecraft corresponding to the provided `spacecraftId`",
                                                                "content": {
                                                                    "application/json": {
                                                                        "schema": {
                                                                            $ref: "#/components/schemas/Spacecraft"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "404": {
                                                                "description": "No spacecraft found for the provided `spacecraftId`",
                                                                "content": {
                                                                    "application/json": {
                                                                        "schema": {
                                                                            $ref: "#/components/schemas/Error"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "500": {
                                                                "description": "Unexpected error",
                                                                "content": {
                                                                    "application/json": {
                                                                        "schema": {
                                                                            $ref: "#/components/schemas/Error"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "components": {
                                                "schemas": {
                                                    "SpacecraftId": {
                                                        "description": "The unique identifier of a spacecraft",
                                                        "type": "string"
                                                    },
                                                    "Spacecraft": {
                                                        "type": "object",
                                                        "required": [
                                                            "id",
                                                            "name",
                                                            "type"
                                                        ],
                                                        "properties": {
                                                            "id": {
                                                                $ref: "#/components/schemas/SpacecraftId"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "type": "string",
                                                                "enum": [
                                                                    "capsule",
                                                                    "probe",
                                                                    "satellite",
                                                                    "spaceplane",
                                                                    "station"
                                                                ]
                                                            },
                                                            "description": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "Error": {
                                                        "type": "object",
                                                        "required": [
                                                            "message"
                                                        ],
                                                        "properties": {
                                                            "message": {
                                                                "description": "A human readable error message",
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                },
                                                "securitySchemes": {
                                                    "ApiKey": {
                                                        "type": "apiKey",
                                                        "in": "header",
                                                        "name": "X-Api-Key"
                                                    }
                                                }
                                            },
                                            "security": [
                                                {
                                                    "ApiKey": []
                                                }
                                            ]
                                        }
                                - path: Pet.json
                                    content: >-
                                        {
                                            "type": "object",
                                            "required": [
                                                "id",
                                                "name"
                                            ],
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "format": "int64"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "tag": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                - path: NewPet.json
                                    content: >-
                                        {
                                            "type": "object",
                                            "allOf": [
                                                {
                                                    $ref: "Pet.json"
                                                },
                                                {
                                                    "required": [
                                                        "name"
                                                    ],
                                                    "properties": {
                                                        "description": {
                                                            "type": "integer",
                                                            "format": "int64"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                - path: parameters.json
                                    content: >-
                                        {
                                            "tagsParam": {
                                                "name": "tags",
                                                "in": "query",
                                                "description": "tags to filter by",
                                                "required": false,
                                                "type": "array",
                                                "collectionFormat": "csv",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "limitsParam": {
                                                "name": "limit",
                                                "in": "query",
                                                "description": "maximum number of results to return",
                                                "required": false,
                                                "type": "integer",
                                                "format": "int32"
                                            }
                                        }
                                - path: common/Error.json
                                    content: >-
                                        {
                                            "type": "object",
                                            "required": [
                                                "code",
                                                "message"
                                            ],
                                            "properties": {
                                                "code": {
                                                    "type": "integer",
                                                    "format": "int32"
                                                },
                                                "message": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                        Create Schema with Proto:
                            value:
                                type: proto:2
                                files:
                                - path: index.proto
                                    content: <file contents>
                                    root:
                                        enabled: true
        createApiVersion:
            content:
                application/json:
                    schema: {}
                    examples:
                        Create Version:
                            value:
                                name: Release 1.5
                                releaseNotes: This is the first public release update.
                                collections:
                                - id: e8a015e0-f472-4bb3-a523-57ce7c4583ed
                                schemas:
                                - id: 18a015e0-f472-4bb3-a523-57ce7c458387
                        Create Version for Git-Linked API with Schemas and Collection:
                            value:
                                name: Release 1.5
                                releaseNotes: This is the first public release update.
                                collections:
                                - filePath: path/to/collection1.json
                                - filePath: path/to/collection2.json
                                schemas:
                                - directoryPath: postman/schemas
                                branch: develop
        createOrUpdateSchemaFile:
            description: The request body to create or update schema file.
            content:
                application/json:
                    schema: {}
                    examples:
                        Create or Update Schema File:
                            value:
                                content: >-
                                    {
                                        "type": "object",
                                        "required": [
                                            "id",
                                            "name"
                                        ],
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "format": "int64"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "tag": {
                                                "type": "string"
                                            }
                                        }
                                    }
                        Create or Update Schema File root Tag:
                            value:
                                root:
                                    enabled: true
        postPANElementOrFolder:
            content:
                application/json:
                    schema: {}
                    examples:
                        Add an API:
                            value:
                                api:
                                    id: 5360b75f-447e-467c-9299-12fd6c92450d
                                    parentFolderId: 1
                        Add a Collection:
                            value:
                                collection:
                                    id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    parentFolderId: 1
                        Add a Collection with Environments:
                            value:
                                collection:
                                    id: 12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2
                                    parentFolderId: 1
                                    environments:
                                    - 92133-622c084d-4f48-470b-826e-18af3c65c775
                                    - 92134-0e15a049-f810-4682-9086-ebb7b40dfb9b
                        Add a Workspace:
                            value:
                                workspace:
                                    id: 1f0df51a-8658-4ee8-a2a1-d2567dfa09a9
                                    parentFolderId: 1
                        Create a Folder:
                            value:
                                folder:
                                    name: Billing
                                    description: The Billing API.
                                    parentFolderId: 0
            required: true
        putPANElementOrFolder:
            content:
                application/json:
                    schema: {}
                    examples:
                        Update an API:
                            value:
                                api:
                                    parentFolderId: 1
                        Update a Collection:
                            value:
                                collection:
                                    parentFolderId: 1
                        Update a Collection's Environments:
                            value:
                                collection:
                                    environments:
                                        $add:
                                        - 92133-622c084d-4f48-470b-826e-18af3c65c775
                                        - 92134-0e15a049-f810-4682-9086-ebb7b40dfb9b
                                        $remove:
                                        - 92637-612c7311-4557-470b-826e-18af35682568
                        Update a Workspace:
                            value:
                                workspace:
                                    parentFolderId: 1
                        Update a Folder:
                            value:
                                folder:
                                    name: Billing
                                    description: The Billing API.
                                    parentFolderId: 0
            required: true
        respondPANElementAddRequest:
            content:
                application/json:
                    schema: {}
                    examples:
                        Approve a Request:
                            value:
                                status: approved
                        Deny a Request:
                            value:
                                status: denied
                                response:
                                    message: The requested collection has a lot of governance violations. Please fix them.
                        Deny a Request Without a Message:
                            value:
                                status: denied
        updateAnApi:
            description: The request body to update the API's meta information.
            content:
                application/json:
                    schema: {}
                    example:
                        name: Test API
                        summary: Testing API
                        description: This is a test API.
        updateVersion:
            content:
                application/json:
                    schema: {}
                    example:
                        name: Release 1.5
                        releaseNotes: This is the first public release update.
    headers:
        Location:
            description: The URL to get or poll the status of an API version task created.
            schema:
                description: The URL to get or poll the status of an API version task created.
    securitySchemes:
        PostmanApiKey:
            type: '"apiKey"'
            name: x-api-key
            in: '"header"'
security:
- PostmanApiKey: []
tags:
- name: API
    description: The `/apis` endpoints let you manage your APIs.
- name: API Version
    description: >
        The API version endpoints let you manage your [API's versions](https://learning.postman.com/docs/designing-and-developing-your-api/versioning-an-api/versioning-an-api-overview/).


        ### Important


        **API versions are deprecated as of Postman v10 and higher.**


        In v9 and earlier, when you create an API, the system creates a single, default API version. You can use this version's ID with any endpoints that require an API version ID.


        In Postman v10, published versions are static representations of your API that consumers can reference (like releases in Postman v9). If you need to work on more than one major iteration of your API in Postman v10, create separate APIs.
- name: API Security
    description: The API Security endpoints let you manage the [security of your API](https://learning.postman.com/docs/api-governance/api-definition/api-definition-warnings/). API security includes ensuring you follow security and format warnings and schema validation.
- name: Audit Logs
    description: >
        The [Audit Logs](https://learning.postman.com/docs/administration/audit-logs/) endpoints let you monitor and analyze your Professional or Enterprise Postman teams.


        **Note:**


        These endpoints are **only** available to Postman **Professional** and **Enterprise** [pricing plans](https://www.postman.com/pricing).
- name: Collections
    description: The `/collections` endpoints let you manage your [collections](https://learning.postman.com/docs/sending-requests/intro-to-collections/).
- name: Environments
    description: The `/environments` endpoints let you manage your [environments](https://learning.postman.com/docs/sending-requests/managing-environments/).
- name: Group Provisioning
    description: The `/scim/v2/Groups` endpoint lets you provision and manage your Postman groups.
- name: Import
    description: The `/import` endpoints let you manage [importing and exporting](https://learning.postman.com/docs/getting-started/importing-and-exporting-data/) Postman data.
- name: Mocks
    description: >
        The `/mocks` endpoints let you manage your [mock servers](https://learning.postman.com/docs/designing-and-developing-your-api/mocking-data/setting-up-mock/).


        ### Important


        **In Postman v10 and higher you cannot create mock servers for collections added to an API definition.** You can still create mock servers for collections that are not part of an API definition.
- name: Monitors
    description: >
        The `/monitors` endpoints let you manage your [monitors](https://learning.postman.com/docs/monitoring-your-api/intro-monitors/).


        ### Important


        **In Postman v10 and higher you cannot create monitors for collections added to an API definition.** You can still create monitors for collections that are not part of an API definition.
- name: Private API Network
    description: The `/private` endpoint lets you manage and work with your team's [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
- name: Relations
    description: >
        The Relations endpoints let you manage your API's relations. [Relations](https://learning.postman.com/docs/designing-and-developing-your-api/developing-an-api/) are an API's connections to items such as documentation, tests, environments, mocks, and monitors.


        ### Important


        In Postman v10 and higher, we only support the following relation types:


        - `unclassified` — The relation for documentation and testing.

        - `apiDefinition` — The relation for API definitions.
- name: Schema
    description: >
        The Schema endpoints let you manage your API's schemas.


        **The schemas concept is deprecated as of Postman v10 and higher.**


        In Postman v10 and higher, “schemas” are now known as “API definitions”. You may see that API responses may return both the `schemas` and `apiDefinition` properties. Use the `apiDefinition` property.
- name: SCIM 2.0 - Identity
    description: >
        Postman supports [SCIM](https://en.wikipedia.org/wiki/System_for_Cross-domain_Identity_Management) (System for Cross-domain Identity Management), which allows you to automate the provisioning of your team. You can deploy Postman at scale across your organization and control access to it with your identity provider.


        **Note:**


        - You **must** be a [Postman Team admin](http://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles) to enable SCIM.

        - SCIM provisioning is only available with a Postman **Enterprise** [pricing plan](https://www.postman.com/pricing).


        ### Enabling SCIM provisioning in Postman


        You must [configure SSO](https://learning.postman.com/docs/administration/sso/admin-sso/) and [enable SCIM](http://learning.postman.com/docs/administration/managing-your-team/configuring-scim/#enabling-scim-provisioning) for your Postman team to use these endpoints.


        **Important:**


        To use SCIM, you must have only **one** SSO method configured. If you have more than one SSO method enabled, you **cannot** generate an SCIM API key.


        ### SCIM provisioning limitations


        You can only deactivate users with the SCIM API. You **cannot** permanently delete users with the API.


        ### Rate limits


        For your organization's team, Postman applies per-minute rate limits across all SCIM API endpoints. This helps ensure that you have the best experience using Postman's SCIM API. The rate limits apply as follows:


        - **Write (POST, PUT, PATCH)** — 180 requests per minute.

        - **Read (GET)** — 300 requests per minute.


        If your requests are limited, the API will return an HTTP `429 Too Many Requests` response status code.
- name: User
    description: The `/me` endpoints let you manage information about the authenticated user.
- name: User Provisioning
    description: >
        The `/scim/v2/Users` endpoint lets you provision and manage your Postman users.


        **Note:**


        You can only deactivate users with the SCIM API. You **cannot** permanently delete users with the API.


        ### Provisioning users with the SCIM API


        - You can only deactivate users with the SCIM API. You cannot permanently delete users with the API.

        - Users created with the SCIM API are automatically created in Postman:
            - If the account's email ID does not exist, the user is also added to their organization's Postman team.
            - If the account's email ID already exists, the system sends the user an email invite to join the Postman team. After they accept the invite, the are added to the team.
        - By default, new users are given the developer role in Postman. Postman user roles cannot be updated via the SCIM API. You must manage user and group roles in Postman.
- name: v10
    description: These endpoints are for Postman version 10 and higher.
- name: Workspaces
    description: The `/workspaces` endpoints let you manage your [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).
- name: Webhooks
    description: The `/webhooks` endpoints let you manage [custom webhooks](https://learning.postman.com/docs/running-collections/collection-webhooks/).

